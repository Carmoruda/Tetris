# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\Tetris.asm
  1   0000                  DEVICE ZXSPECTRUM48
  2   0000              	SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION
  3   0000                  org $8000               ; Program located at $8000 = 32768.
  4   8000
  5   8000              BEGIN:
  6   8000 F3               DI              ; Disable interruptions.
  7   8001 31 00 00         LD SP, 0        ; Set the stack pointer to the top of memory.
  8   8004 21 00 58         LD HL, $5800    ; First square of the screen.
  9   8007
 10   8007              MAIN:
 11   8007 CD 3F B9         CALL CLEARSCR       ; Clean screen.
 12   800A CD 19 80         CALL STARTINGSCREEN ; Initial screen.
 13   800D CD 72 80         CALL GAMESCREEN     ; Game screen.
 14   8010 CD D5 80         CALL ENDINGSCREEN   ; End screen.
 15   8013
 16   8013              ENDOFCODE:
 17   8013 18 FE            JR ENDOFCODE
 18   8015
 19   8015              ; -------- VARIABLES -------
 20   8015 FF 1F        WAITING_TIME: DW $1FFF  ; Wait time (in ms).
 21   8017              WAITING_TIME_SUBTRACT EQU $10   ; Wait time decrement.
 22   8017              WAITING_TIME_TRESHOLD EQU $05
 23   8017
 24   8017 00           ROWS: DB 0
 25   8018 00           COLUMNS: DB 0
 26   8019
 27   8019              ; -------- SCREENS --------
 28   8019                  INCLUDE "./Screens/StartScreen.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Screens/StartScreen.asm
  1+  8019              ;-----------------------------------------------------------------------------------------
  2+  8019              ; STARTINGSCREEN - Displays the start screen with its corresponding messages.
  3+  8019              ;-----------------------------------------------------------------------------------------
  4+  8019              STARTINGSCREEN:
  5+  8019 CD 34 81             CALL LOADSTARTINGSCREEN
  6+  801C                      ; Would you like to play? (y/n)
  7+  801C 3E 39                LD A, $39              ; Attribute - Blue font with white background
  8+  801E 06 06                LD B, 6                ; Row
  9+  8020 0E 10                LD C, 16               ; Column
 10+  8022 DD 21 52 80          LD IX, PLAYMESSAGE1    ; Would you
 11+  8026 CD CE B8             CALL PRINTAT
 12+  8029
 13+  8029 3E 39                LD A, $39              ; Attribute - Blue font with white background
 14+  802B 06 08                LD B, 8                ; Row
 15+  802D 0E 0E                LD C, 14               ; Column
 16+  802F DD 21 5D 80          LD IX, PLAYMESSAGE2    ; like to play
 17+  8033 CD CE B8             CALL PRINTAT
 18+  8036
 19+  8036 3E 39                LD A, $39              ; Attribute - Blue font with white background
 20+  8038 06 0A                LD B, 10               ; Row
 21+  803A 0E 10                LD C, 16               ; Column
 22+  803C DD 21 6B 80          LD IX, PLAYMESSAGE3    ; (Y/N)
 23+  8040 CD CE B8             CALL PRINTAT
 24+  8043
 25+  8043                      ; Cursor
 26+  8043 21 57 59             LD HL, $5800 + 10 * 32 + 23    ; Row 10, column 23
 27+  8046 36 8F                LD (HL), $8F
 28+  8048
 29+  8048 AF                   XOR A
 30+  8049 CD AA B8             CALL READYKEY
 31+  804C FE 01                CP 1
 32+  804E C2 D5 80             JP NZ, ENDINGSCREEN ; Y - Game
 33+  8051 C9                   RET                 ; N - End
 34+  8052              ;-----------------------------------------------------------------------------------------
 35+  8052
 36+  8052 57 4F 55 4C  PLAYMESSAGE1: DB "WOULD YOU ", 0
 36+  8056 44 20 59 4F
 36+  805A 55 20 00
 37+  805D 4C 49 4B 45  PLAYMESSAGE2: DB "LIKE TO PLAY?", 0
 37+  8061 20 54 4F 20
 37+  8065 50 4C 41 59
 37+  8069 3F 00
 38+  806B 20 28 59 2F  PLAYMESSAGE3: DB " (Y/N)", 0
 38+  806F 4E 29 00
 39+  8072
 40+  8072              ; TODO: Change cursor. It must echo de pressed key.
 41+  8072
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Screens/StartScreen.asm
 29   8072                  INCLUDE "./Screens/GameScreen.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Screens/GameScreen.asm
  1+  8072              ;-----------------------------------------------------------------------------------------
  2+  8072              ; GAMESCREEN - Selects the row for the first U border square and calls the TETRIS_3D
  3+  8072              ;              routine.
  4+  8072              ;-----------------------------------------------------------------------------------------
  5+  8072              GAMESCREEN:
  6+  8072 CD 3F B9         CALL CLEARSCR   ; Clean screen.
  7+  8075 CD 5A BC         CALL TETRIS_3D
  8+  8078 06 01            LD B, 1     ; Square Row
  9+  807A              ;-----------------------------------------------------------------------------------------
 10+  807A
 11+  807A              ;-----------------------------------------------------------------------------------------
 12+  807A              ; VERTICAL_BORDER - Display the U vertical sides.
 13+  807A              ;-----------------------------------------------------------------------------------------
 14+  807A              VERTICAL_BORDER:
 15+  807A 0E 06            LD C, 6     ; Square Column
 16+  807C 3E 38            LD A, $38   ; Square color (hex) -> White
 17+  807E CD 7B BC         CALL DOTYXC ; Paint square
 18+  8081
 19+  8081 F5               PUSH AF
 20+  8082 79               LD A, C
 21+  8083 C6 13            ADD TETRIS_WIDTH
 22+  8085 4F               LD C, A
 23+  8086 F1               POP AF
 24+  8087 CD 7B BC         CALL DOTYXC
 25+  808A
 26+  808A 78               LD A, B
 27+  808B 04               INC B
 28+  808C FE 15            CP TETRIS_HEIGHT
 29+  808E 20 EA            JR NZ, VERTICAL_BORDER
 30+  8090
 31+  8090 0E 06            LD C, 6     ; Square Column
 32+  8092              ;-----------------------------------------------------------------------------------------
 33+  8092
 34+  8092              ;-----------------------------------------------------------------------------------------
 35+  8092              ; HORIZONTAL_BORDER - Display the U bottom side.
 36+  8092              ;-----------------------------------------------------------------------------------------
 37+  8092              HORIZONTAL_BORDER:
 38+  8092 3E 38            LD A, $38   ; Square color (hex) -> White
 39+  8094 CD 7B BC         CALL DOTYXC ; Paint square
 40+  8097
 41+  8097 79               LD A, C
 42+  8098 0C               INC C
 43+  8099 FE 19            CP TETRIS_MAX_WIDTH
 44+  809B 20 F5            JR NZ, HORIZONTAL_BORDER
 45+  809D              ;-----------------------------------------------------------------------------------------
 46+  809D
 47+  809D              GAME_TETROMINO:
 48+  809D DD 21 76 B7      LD IX, T_I2     ; Tetromino
 49+  80A1
 50+  80A1 3E 01            LD A, 1         ; Screen row
 51+  80A3 32 17 80         LD (ROWS), A    ; Save row
 52+  80A6
 53+  80A6 3E 0F            LD A, 15        ; Screen column
 54+  80A8 32 18 80         LD (COLUMNS), A ; Save column
 55+  80AB
 56+  80AB CD 42 B8         CALL PAINT_TETROMINO
 57+  80AE
 58+  80AE              MOVE_TETROMINO_DOWN:
 59+  80AE CD 7C B8         CALL ERASE_TETROMINO
 60+  80B1 3A 17 80         LD A, (ROWS)
 61+  80B4 3C               INC A
 62+  80B5 32 17 80         LD (ROWS), A
 63+  80B8 F5               PUSH AF
 64+  80B9 CD 42 B8         CALL PAINT_TETROMINO
 65+  80BC F1               POP AF
 66+  80BD FE 13            CP 19
 67+  80BF 20 ED            JR NZ, MOVE_TETROMINO_DOWN
 68+  80C1 CD 7C B8         CALL ERASE_TETROMINO
 69+  80C4 3A 17 80         LD A, (ROWS)
 70+  80C7 3C               INC A
 71+  80C8 32 17 80         LD (ROWS), A
 72+  80CB CD 42 B8         CALL PAINT_TETROMINO
 73+  80CE
 74+  80CE              ;-----------------------------------------------------------------------------------------
 75+  80CE              ; GAMELOOP - Game simulation.
 76+  80CE              ;-----------------------------------------------------------------------------------------
 77+  80CE              GAMELOOP:
 78+  80CE 18 FE            JR GAMELOOP
 79+  80D0              ;-----------------------------------------------------------------------------------------
 80+  80D0
 81+  80D0              TETRIS_WIDTH EQU 19
 82+  80D0              TETRIS_MAX_WIDTH EQU 25
 83+  80D0              TETRIS_HEIGHT EQU 21
 84+  80D0 47 41 4D 45  GAMEMESSAGE: DB "GAME", 0
 84+  80D4 00
 85+  80D5
 86+  80D5              ; CALL DIBUJA
 87+  80D5              ; ESPERA (El tiempo de espera debe ser variable)
 88+  80D5              ; BORRAMOS LA FORMA
 89+  80D5              ; SUMAMOS 1 A LA FILA
 90+  80D5
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Screens/GameScreen.asm
 30   80D5                  INCLUDE "./Screens/EndScreen.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Screens/EndScreen.asm
  1+  80D5              ;-----------------------------------------------------------------------------------------
  2+  80D5              ; ENDINGSCREEN - Displays the end screen with its corresponding messages.
  3+  80D5              ;-----------------------------------------------------------------------------------------
  4+  80D5              ENDINGSCREEN:
  5+  80D5 CD 3F B9             CALL CLEARSCR   ; Clean screen.
  6+  80D8
  7+  80D8 CD 49 9C             CALL LOADENDINGSCREEN
  8+  80DB
  9+  80DB                      ; Bye!
 10+  80DB 3E 3B                LD A, $3B               ; Attribute - Pink font with white background
 11+  80DD 06 04                LD B, 4                 ; Row
 12+  80DF 0E 00                LD C, 0                 ; Column
 13+  80E1 DD 21 18 81          LD IX, BYEMESSAGE       ; Bye!
 14+  80E5 CD CE B8             CALL PRINTAT
 15+  80E8
 16+  80E8                      ; Play again? (Y/N)
 17+  80E8 3E 3B                LD A, $3B               ; Attribute - Pink font with white background
 18+  80EA 06 06                LD B, 6                 ; Row
 19+  80EC 0E 00                LD C, 0                 ; Column
 20+  80EE DD 21 1D 81          LD IX, PLAYAGAINMESSAGE ; Play again? (Y/N)
 21+  80F2 CD CE B8             CALL PRINTAT
 22+  80F5
 23+  80F5                      ; Cursor
 24+  80F5 21 D1 58             LD HL, $5800 + 6 * 32 + 17    ; Row 6, column 17
 25+  80F8 36 9F                LD (HL), $9F
 26+  80FA
 27+  80FA AF                   XOR A
 28+  80FB CD AA B8             CALL READYKEY
 29+  80FE FE 01                CP 1
 30+  8100 CA 19 80             JP Z, STARTINGSCREEN    ; Y - Start screen
 31+  8103 3E 3B                LD A, $3B               ; N - End of code.
 32+  8105 06 08                LD B, 8
 33+  8107 0E 0B                LD C, 11
 34+  8109 DD 21 2F 81          LD IX, ENDMESSAGE       ; End!
 35+  810D CD CE B8             CALL PRINTAT
 36+  8110 21 D1 58             LD HL, $5800 + 6 * 32 + 17    ; Row 10, column 23
 37+  8113 36 38                LD (HL), $38
 38+  8115
 39+  8115 C3 13 80             JP ENDOFCODE
 40+  8118              ;-----------------------------------------------------------------------------------------
 41+  8118
 42+  8118 42 59 45 21  BYEMESSAGE: DB "BYE!", 0
 42+  811C 00
 43+  811D 50 4C 41 59  PLAYAGAINMESSAGE: DB "PLAY AGAIN? (Y/N)", 0
 43+  8121 20 41 47 41
 43+  8125 49 4E 3F 20
 43+  8129 28 59 2F 4E
 43+  812D 29 00
 44+  812F 45 4E 44 21  ENDMESSAGE: DB "END!", 0
 44+  8133 00
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Screens/EndScreen.asm
 31   8134                  INCLUDE "./Screens/LoadStartingScreen.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Screens/LoadStartingScreen.asm
  1+  8134              ;-----------------------------------------------------------------------------------------
  2+  8134              ; LOADSTARTINGSCREEN_LOOP - Set values to paint the graphic.
  3+  8134              ;-----------------------------------------------------------------------------------------
  4+  8134              LOADSTARTINGSCREEN:
  5+  8134 21 49 81         LD HL, LOADSTARTINGSCREEN_START ; HL = Starting addres of screen data
  6+  8137
  7+  8137                  ; Save used registers
  8+  8137 C5               PUSH BC
  9+  8138 D5               PUSH DE
 10+  8139
 11+  8139 11 00 40         LD DE, $4000 ; Display to video memory area
 12+  813C 01 00 1B         LD BC, 6912  ; VidkeoRAM size
 13+  813F              ;-----------------------------------------------------------------------------------------
 14+  813F
 15+  813F              ;-----------------------------------------------------------------------------------------
 16+  813F              ; LOADSTARTINGSCREEN_LOOP - Displays the start screen graphic.
 17+  813F              ;-----------------------------------------------------------------------------------------
 18+  813F              LOADSTARTINGSCREEN_LOOP:
 19+  813F ED A0            LDI ; (DE) = (HL) , DE++, HL++, BC--
 20+  8141
 21+  8141 78               LD A, B ; Check if BC is 0
 22+  8142 B1               OR C ; BC = 0 <=> B|C=0
 23+  8143 C2 3F 81         JP NZ, LOADSTARTINGSCREEN_LOOP ; Next display byte
 24+  8146
 25+  8146                  ; Retrieve used registers
 26+  8146 D1               POP DE
 27+  8147 C1               POP BC
 28+  8148
 29+  8148 C9               RET
 30+  8149              ;-----------------------------------------------------------------------------------------
 31+  8149
 32+  8149              LOADSTARTINGSCREEN_START: INCBIN "../GraphicScreens/StartingScreenTetris.scr"
 33+  9C49
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Screens/LoadStartingScreen.asm
 32   9C49                  INCLUDE "./Screens/LoadEndingScreen.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Screens/LoadEndingScreen.asm
  1+  9C49              ;-----------------------------------------------------------------------------------------
  2+  9C49              ; LOADENDINGSCREEN -  Set values to paint the graphic.
  3+  9C49              ;-----------------------------------------------------------------------------------------
  4+  9C49              LOADENDINGSCREEN:
  5+  9C49 21 5E 9C         LD HL, LOADSTARTINGSCREEN_END ; HL = Starting addres of screen data
  6+  9C4C
  7+  9C4C                  ; Save used registers
  8+  9C4C C5               PUSH BC
  9+  9C4D D5               PUSH DE
 10+  9C4E
 11+  9C4E 11 00 40         LD DE, $4000 ; Display to video memory area
 12+  9C51 01 00 1B         LD BC, 6912  ; VidkeoRAM size
 13+  9C54              ;-----------------------------------------------------------------------------------------
 14+  9C54
 15+  9C54              ;-----------------------------------------------------------------------------------------
 16+  9C54              ; LOADENDINGSCREEN_LOOP - Displays the end screen graphic.
 17+  9C54              ;-----------------------------------------------------------------------------------------
 18+  9C54              LOADENDINGSCREEN_LOOP:
 19+  9C54 ED A0            LDI ; (DE) = (HL) , DE++, HL++, BC--
 20+  9C56
 21+  9C56 78               LD A, B ; Check if BC is 0
 22+  9C57 B1               OR C ; BC = 0 <=> B|C=0
 23+  9C58 C2 54 9C         JP NZ, LOADENDINGSCREEN_LOOP ; Next display byte
 24+  9C5B
 25+  9C5B                  ; Retrieve used registers
 26+  9C5B D1               POP DE
 27+  9C5C C1               POP BC
 28+  9C5D
 29+  9C5D C9               RET
 30+  9C5E              ;-----------------------------------------------------------------------------------------
 31+  9C5E
 32+  9C5E              LOADSTARTINGSCREEN_END: INCBIN "../GraphicScreens/EndingScreenTetris.scr"
 33+  B75E
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Screens/LoadEndingScreen.asm
 33   B75E
 34   B75E              ; -------- TETROMINOS --------
 35   B75E                  INCLUDE "./Tetrominos/Tetrominos.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Tetrominos/Tetrominos.asm
  1+  B75E              ;-----------------------------------------------------------------------------------------
  2+  B75E              ; Name: DB rows, columns, i, i, i, i, i, i: DW left, right
  3+  B75E              ;-----------------------------------------------------------------------------------------
  4+  B75E
  5+  B75E              ; O block (Yellow) - All four rotations are the same
  6+  B75E 02 02 30 30  T_0: DB 2, 2, $30, $30, $30, $30, 0, 0
  6+  B762 30 30 00 00
  6+  B766 5E B7 5E B7    DW T_0, T_0
  7+  B76A
  8+  B76A              ; I block (Cyan) - Vertical and horizontal rotations are the same among them
  9+  B76A 04 01 28 28  T_I1: DB 4, 1, $28, $28, $28, $28, 0, 0
  9+  B76E 28 28 00 00
  9+  B772 76 B7 76 B7    DW T_I2, T_I2
 10+  B776 01 04 28 28  T_I2: DB 1, 4, $28, $28, $28, $28, 0, 0
 10+  B77A 28 28 00 00
 10+  B77E 6A B7 6A B7    DW T_I1, T_I1
 11+  B782
 12+  B782              ; Z block (Red) - Vertical and horizontal rotations are the same among them
 13+  B782 02 03 10 10  T_Z1: DB 2, 3, $10, $10, 0, 0, $10, $10
 13+  B786 00 00 10 10
 13+  B78A 8E B7 8E B7    DW T_Z2, T_Z2
 14+  B78E 03 02 00 10  T_Z2: DB 3, 2, 0, $10, $10, $10, $10, 0
 14+  B792 10 10 10 00
 14+  B796 82 B7 82 B7    DW T_Z1, T_Z1
 15+  B79A
 16+  B79A              ; S block (Green) - Vertical and horizontal rotations are the same among them
 17+  B79A 02 03 00 20  T_S1: DB 2, 3, 0, $20, $20, $20, $20, 0
 17+  B79E 20 20 20 00
 17+  B7A2 A6 B7 A6 B7    DW T_S2, T_S2
 18+  B7A6 03 02 20 00  T_S2: DB 3, 2, $20, 0, $20, $20, 0, $20
 18+  B7AA 20 20 00 20
 18+  B7AE 9A B7 9A B7    DW T_S1, T_S1
 19+  B7B2
 20+  B7B2              ; L block (Dark Yellow) -  Four rotations
 21+  B7B2 03 02 70 00  T_L1: DB 3, 2, $70, 0, $70, 0, $70, $70
 21+  B7B6 70 00 70 70
 21+  B7BA D6 B7 BE B7    DW T_L4, T_L2
 22+  B7BE 02 03 70 70  T_L2: DB 2, 3, $70, $70, $70, $70, 0, 0
 22+  B7C2 70 70 00 00
 22+  B7C6 B2 B7 CA B7    DW T_L1, T_L3
 23+  B7CA 03 02 70 70  T_L3: DB 3, 2, $70, $70, 0, $70, 0, $70
 23+  B7CE 00 70 00 70
 23+  B7D2 BE B7 D6 B7    DW T_L2, T_L4
 24+  B7D6 02 03 00 00  T_L4: DB 2, 3, 0, 0, $70, $70, $70, $70
 24+  B7DA 70 70 70 70
 24+  B7DE CA B7 B2 B7    DW T_L3, T_L1
 25+  B7E2
 26+  B7E2              ; J block (Dark Blue) - Four rotations
 27+  B7E2 03 02 00 08  T_J1: DB 3, 2, 0, $08, 0, $08, $08, $08
 27+  B7E6 00 08 08 08
 27+  B7EA 06 B8 EE B7    DW T_J4, T_J2
 28+  B7EE 02 03 08 00  T_J2: DB 2, 3, $08, 0, 0, $08, $08, $08
 28+  B7F2 00 08 08 08
 28+  B7F6 E2 B7 FA B7    DW T_J1, T_J3
 29+  B7FA 03 02 08 08  T_J3: DB 3, 2, $08, $08, $08, 0, $08, 0
 29+  B7FE 08 00 08 00
 29+  B802 EE B7 06 B8    DW T_J2, T_J4
 30+  B806 02 03 08 08  T_J4: DB 2, 3, $08, $08, $08, 0, 0, $08
 30+  B80A 08 00 00 08
 30+  B80E FA B7 E2 B7    DW T_J3, T_J1
 31+  B812
 32+  B812              ; T block (Purple) - Four rotations
 33+  B812 02 03 18 18  T_T1: DB 2, 3, $18, $18, $18, 0, $18, 0
 33+  B816 18 00 18 00
 33+  B81A 36 B8 1E B8    DW T_T4, T_T2
 34+  B81E 03 02 00 18  T_T2: DB 3, 2, 0, $18, $18, $18, 0, 3*8
 34+  B822 18 18 00 18
 34+  B826 12 B8 2A B8    DW T_T1, T_T3
 35+  B82A 02 03 00 18  T_T3: DB 2, 3, 0, $18, 0, $18, $18, 3*8
 35+  B82E 00 18 18 18
 35+  B832 1E B8 36 B8    DW T_T2, T_T4
 36+  B836 03 02 18 00  T_T4: DB 3, 2, $18, 0, $18, $18, $18, 0
 36+  B83A 18 18 18 00
 36+  B83E 2A B8 12 B8    DW T_T3, T_T1
 37+  B842              ;-----------------------------------------------------------------------------------------
 38+  B842
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Tetrominos/Tetrominos.asm
 36   B842                  INCLUDE "./Tetrominos/PaintTetrominos.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Tetrominos/PaintTetrominos.asm
  1+  B842              ;-----------------------------------------------------------------------------------------
  2+  B842              ; PAINT_TETROMINOS - Paint a tetromino.
  3+  B842              ;	  IN -  IX = Tetromino we want to paint.
  4+  B842              ;           ROWS = Row of the screen in which we want to paint.
  5+  B842              ;           COLUMNS = Column of the screen in which we want to paint.
  6+  B842              ;-----------------------------------------------------------------------------------------
  7+  B842              PAINT_TETROMINO:
  8+  B842 DD E5 FD E1      LD IY, IX
  9+  B846 DD 5E 00         LD E, (IX)      ; Number of rows
 10+  B849 FD 23            INC IY
 10+  B84B FD 23          INC IY
 11+  B84D 3A 17 80         LD A, (ROWS)
 12+  B850 47               LD B, A
 13+  B851
 14+  B851              PAINT_TETROMINO_OUTERLOOP:
 15+  B851 DD 56 01         LD D, (IX + 1)  ; Number of columns
 16+  B854 3A 18 80         LD A, (COLUMNS)
 17+  B857 4F               LD C, A
 18+  B858              PAINT_TETROMINO_INNERLOOP:
 19+  B858 FD 7E 00         LD A, (IY)                  ; A = Square
 20+  B85B FD 23            INC IY                      ; IY = Next square
 21+  B85D FE 00            CP 0                        ; Square = 0?
 22+  B85F C2 66 B8         JP NZ, PAINT_TETROMINO_LOOP ; No - Paint
 23+  B862 0C               INC C                       ; Next column
 24+  B863 C3 6C B8         JP PAINT_TETROMINO_CHECK_LOOPS               ; Yes - Check loop conditions
 25+  B866
 26+  B866              PAINT_TETROMINO_LOOP:
 27+  B866 D5               PUSH DE
 28+  B867 CD 7B BC         CALL DOTYXC         ; Paint square
 29+  B86A D1               POP DE
 30+  B86B 0C               INC C               ; Next column
 31+  B86C              PAINT_TETROMINO_CHECK_LOOPS:
 32+  B86C 7A               LD A, D                             ; A = D
 33+  B86D FE 00            CP 0                                ; Column = 0?
 34+  B86F 15               DEC D                               ; Column -= 1
 35+  B870 C2 58 B8         JP NZ, PAINT_TETROMINO_INNERLOOP    ; Yes - Paint
 36+  B873 04               INC B                               ; Next row
 37+  B874 7B               LD A, E                             ; A = E
 38+  B875 FE 00            CP 0                                ; Row = 0?
 39+  B877 1D               DEC E                               ; Row -= 1
 40+  B878 C2 51 B8         JP NZ, PAINT_TETROMINO_OUTERLOOP    ; No - Loop
 41+  B87B C9               RET
 42+  B87C              ;-----------------------------------------------------------------------------------------
 43+  B87C
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Tetrominos/PaintTetrominos.asm
 37   B87C                  INCLUDE "./Tetrominos/EraseTetrominos.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Tetrominos/EraseTetrominos.asm
  1+  B87C              ;-----------------------------------------------------------------------------------------
  2+  B87C              ; ERASE_TETROMINOS - Erase a tetromino.
  3+  B87C              ;	  IN -  IX = Tetromino we want to ERASE.
  4+  B87C              ;           ROWS = Row of the screen in which we want to ERASE.
  5+  B87C              ;           COLUMNS = Column of the screen in which we want to ERASE.
  6+  B87C              ;-----------------------------------------------------------------------------------------
  7+  B87C              ERASE_TETROMINO:
  8+  B87C DD E5 FD E1      LD IY, IX
  9+  B880 DD 5E 00         LD E, (IX)      ; Number of rows
 10+  B883 FD 23            INC IY
 10+  B885 FD 23          INC IY
 11+  B887 3A 17 80         LD A, (ROWS)
 12+  B88A 47               LD B, A
 13+  B88B
 14+  B88B              ERASE_TETROMINO_OUTERLOOP:
 15+  B88B DD 56 01         LD D, (IX + 1)  ; Number of columns
 16+  B88E 3A 18 80         LD A, (COLUMNS)
 17+  B891 4F               LD C, A
 18+  B892              ERASE_TETROMINO_INNERLOOP:
 19+  B892 D5               PUSH DE
 20+  B893 3E 00            LD A, $00
 21+  B895 CD 7B BC         CALL DOTYXC         ; Erase square
 22+  B898 D1               POP DE
 23+  B899 0C               INC C               ; Next column
 24+  B89A              ERASE_TETROMINOS_CHECK_LOOPS:
 25+  B89A 7A               LD A, D                             ; A = D
 26+  B89B FE 00            CP 0                                ; Column = 0?
 27+  B89D 15               DEC D                               ; Column -= 1
 28+  B89E C2 92 B8         JP NZ, ERASE_TETROMINO_INNERLOOP    ; Yes - Erase
 29+  B8A1 04               INC B                               ; Next row
 30+  B8A2 7B               LD A, E                             ; A = E
 31+  B8A3 FE 00            CP 0                                ; Row = 0?
 32+  B8A5 1D               DEC E                               ; Row -= 1
 33+  B8A6 C2 8B B8         JP NZ, ERASE_TETROMINO_OUTERLOOP    ; No - Loop
 34+  B8A9 C9               RET
 35+  B8AA              ;-----------------------------------------------------------------------------------------
 36+  B8AA
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Tetrominos/EraseTetrominos.asm
 38   B8AA
 39   B8AA              ; -------- FUNCTIONS --------
 40   B8AA                  INCLUDE "./Functions/ReadKey.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Functions/ReadKey.asm
  1+  B8AA              ;-----------------------------------------------------------------------------------------
  2+  B8AA              ; READYKEY - Identifies whether the user presses the Y key.
  3+  B8AA              ;	OUT - A = 1 if Y key is pressed.
  4+  B8AA              ;-----------------------------------------------------------------------------------------
  5+  B8AA              READYKEY:
  6+  B8AA 01 FE DF             LD BC, $DFFE       ; Keys: Y, U, I, O, P
  7+  B8AD ED 78                IN A, (C)
  8+  B8AF CB 67                BIT 4, A        ; Key Y
  9+  B8B1 20 09                JR NZ, READNKEY
 10+  B8B3              LOOPY:
 11+  B8B3 ED 78                IN A, (C)
 12+  B8B5 FE FF                CP $FF
 13+  B8B7 20 FA                JR NZ, LOOPY
 14+  B8B9 3E 01                LD A, 1
 15+  B8BB C9                   RET
 16+  B8BC              ;-----------------------------------------------------------------------------------------
 17+  B8BC
 18+  B8BC
 19+  B8BC              ;-----------------------------------------------------------------------------------------
 20+  B8BC              ; READNKEY - Identifies whether the user presses the N key.
 21+  B8BC              ;	OUT - A = 2 if N key is pressed.
 22+  B8BC              ;-----------------------------------------------------------------------------------------
 23+  B8BC              READNKEY:
 24+  B8BC 3E 7F                LD A, $7F       ; Keys: B, N, M, SYMB, SPACE
 25+  B8BE DB FE                IN A, ($FE)
 26+  B8C0 CB 5F                BIT 3, A        ; Key N
 27+  B8C2 20 E6                JR NZ, READYKEY
 28+  B8C4              LOOPN:
 29+  B8C4 ED 78                IN A, (C)
 30+  B8C6 FE FF                CP $FF
 31+  B8C8 20 FA                JR NZ, LOOPN
 32+  B8CA 3E 02                LD A, 2
 33+  B8CC C9                   RET
 34+  B8CD C9                   RET
 35+  B8CE              ;-----------------------------------------------------------------------------------------
 36+  B8CE
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Functions/ReadKey.asm
 41   B8CE                  INCLUDE "./Functions/Printat.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Functions/Printat.asm
  1+  B8CE              ; -------------------------------
  2+  B8CE              ; ZX Spectrum Text print library
  3+  B8CE              ; Daniel León - AOC - UFV 2020
  4+  B8CE              ; -------------------------------
  5+  B8CE
  6+  B8CE
  7+  B8CE              ; ----------------------------------------------------------------------------------------
  8+  B8CE              ; PRINTAT - Print a string in a position and attributes as per registers:
  9+  B8CE              ;		IN	A	: Bit 7=1 For Flash / Bit 6=1 For Brigh / Bit 5,4,3 for Paper / Bit 2,1,0 for Ink
 10+  B8CE              ;		IN	B	: Row 0..23
 11+  B8CE              ;		IN	C	: Column 0..31
 12+  B8CE              ;		IN	IX	: Address of text (Text must end in a 0)
 13+  B8CE              ; ----------------------------------------------------------------------------------------
 14+  B8CE CD DD B8     PRINTAT:	CALL PREP_PRT				; Update Attribute var &Screen & Attributes pointers
 15+  B8D1              ; ----------------------------------------------------------------------------------------
 16+  B8D1              ;		VVV Do not move PRINTSTR below as PRINTAT continues into PRINTSTR routine
 17+  B8D1              ; ----------------------------------------------------------------------------------------
 18+  B8D1              ; PRINTSTR - Prints String - IX Points to the String start
 19+  B8D1              ; ----------------------------------------------------------------------------------------
 20+  B8D1 DD 7E 00     PRINTSTR:   LD A,(IX)					; A Contains first char to print
 21+  B8D4 B7           			OR A						; check for end of string (0)
 22+  B8D5 C8           			RET Z						; Finish printing if 0
 23+  B8D6 CD 0B B9     			CALL PRINTCHNUM
 24+  B8D9 DD 23        			INC IX						; Move to next char in string
 25+  B8DB 18 F4        			JR PRINTSTR					; Start over printing sequence
 26+  B8DD              ; ----------------------------------------------------------------------------------------
 27+  B8DD
 28+  B8DD
 29+  B8DD              ;-----------------------------------------------------------------------------------------
 30+  B8DD              ; PREP_PRT - Updates Print_Attr, SCR & ATTR Vars
 31+  B8DD              ;-----------------------------------------------------------------------------------------
 32+  B8DD 32 51 B9     PREP_PRT:	LD (PRINT_ATTR),A			; Set Attribute
 33+  B8E0 CD E6 B8     PREP_PRT_2:	CALL CRtoSCREEN
 34+  B8E3 C3 F8 B8     			JP CRtoATTR
 35+  B8E6              ;-----------------------------------------------------------------------------------------
 36+  B8E6
 37+  B8E6              ;-----------------------------------------------------------------------------------------
 38+  B8E6              ; CRtoSCREEN - Converts a scr char coord into a SCREEN Address   b,c = y,x positions
 39+  B8E6              ;	IN  - B=Row, C=Column
 40+  B8E6              ;	OUT - HL=Address in screen also stored in (SCR_CUR_PTR)
 41+  B8E6              ;	Conversion:
 42+  B8E6              ;			Row FFfff   Column CCCCC
 43+  B8E6              ;			HL=%010FF000 fffCCCCC
 44+  B8E6              ;-----------------------------------------------------------------------------------------
 45+  B8E6              CRtoSCREEN:
 46+  B8E6 78           			LD A,B						; %___FFfff
 47+  B8E7 F6 40        			OR #40						; %010FFfff
 48+  B8E9 E6 F8        			AND #F8						; %010FF000
 49+  B8EB 67           			LD H,A
 50+  B8EC
 51+  B8EC 78           			LD A,B						; %___FFfff
 52+  B8ED E6 07        			AND #7						; %00000fff
 53+  B8EF 0F           			RRCA						; %f00000ff
 54+  B8F0 0F           			RRCA						; %ff00000f
 55+  B8F1 0F           			RRCA						; %fff00000
 56+  B8F2 B1           			OR C						; %fffCCCCC
 57+  B8F3 6F           			LD L,A
 58+  B8F4 22 4D B9                 LD (SCR_CUR_PTR),HL			; Update Variable
 59+  B8F7 C9                       RET
 60+  B8F8              ; ----------------------------------------------------------------------------------------
 61+  B8F8
 62+  B8F8
 63+  B8F8
 64+  B8F8              ;-----------------------------------------------------------------------------------------
 65+  B8F8              ; CRtoATTR - Converts a screen char coord  into a ATTR Address  b,c = y,x positions
 66+  B8F8              ;	IN  - B=Row, C=Column
 67+  B8F8              ;	OUT - HL=Address in screen also stored in (SCR_ATTR_PTR)
 68+  B8F8              ;	Conversion:
 69+  B8F8              ;			Row FFfff   Column CCCCC
 70+  B8F8              ;			HL=%010110FF fffCCCCC
 71+  B8F8              ;-----------------------------------------------------------------------------------------
 72+  B8F8              CRtoATTR:
 73+  B8F8 78           			LD A,B						; %___FFfff
 74+  B8F9 0F           			RRCA						; %f000FFff
 75+  B8FA 0F           			RRCA						; %ff000FFf
 76+  B8FB 0F           			RRCA						; %fff000FF
 77+  B8FC 6F           			LD L,A
 78+  B8FD E6 03        			AND 3						; %000000FF	value of FF can be only 00,01,10
 79+  B8FF F6 58        			OR #58						; %010110FF value will be #58, #59 or #5A
 80+  B901 67           			LD H,A
 81+  B902
 82+  B902 7D           			LD A,L						; %fff000FF
 83+  B903 E6 E0        			AND #E0						; %fff00000
 84+  B905 B1           			OR C						; %fffCCCCC
 85+  B906 6F           			LD L,A
 86+  B907
 87+  B907 22 4F B9                 LD (SCR_ATTR_PTR),HL		; Update Variable
 88+  B90A C9                       RET
 89+  B90B              ; ----------------------------------------------------------------------------------------
 90+  B90B
 91+  B90B
 92+  B90B
 93+  B90B              ; ----------------------------------------------------------------------------------------
 94+  B90B              ; PRINTCHNUM - Prints Char Number N (stored in A)
 95+  B90B              ;-----------------------------------------------------------------------------------------
 96+  B90B              PRINTCHNUM:	;SUB 32						; Adjust Ascii to charset
 97+  B90B 26 00        			LD H,0						; Multiply value by 8 to get to right Char in Charset
 98+  B90D 6F           			LD L,A
 99+  B90E 29           			ADD HL,HL
100+  B90F 29           			ADD HL,HL
101+  B910 29           			ADD HL,HL
102+  B911 11 52 B8     			LD DE, CHARSET-(8*32)		; Optimize in compile time (instead of sub 32)
103+  B914 19           			ADD HL,DE
104+  B915 EB           			EX  DE,HL					;Value in DE
105+  B916              			; Continues to printchar below
106+  B916              ; ----------------------------------------------------------------------------------------
107+  B916
108+  B916
109+  B916              ; ----------------------------------------------------------------------------------------
110+  B916              ; PRINTCHAR - Prints Char  (DE points to the char. Uses HL as last Cur Pointer)
111+  B916              ; ----------------------------------------------------------------------------------------
112+  B916              PRINTCHAR:
113+  B916 06 08        			LD B,8						; 8 Lines per char
114+  B918 2A 4D B9                 LD HL, (SCR_CUR_PTR)		; Load Cursor Pointer y,x
115+  B91B
116+  B91B 1A           BYTEPCHAR:	LD A,(DE)					; Get Char to be printed, first line
117+  B91C 77           			LD (HL),A					; Move to Printing location
118+  B91D 24                       INC H						; inc H so next line in char (ZX Spectrum Screen RAM)
119+  B91E 13                       INC DE 						; next line to be printed
120+  B91F 10 FA                    DJNZ BYTEPCHAR				; Repeat 8 lines
121+  B921 3A 51 B9                 LD A,(PRINT_ATTR) 			; Load Attributes to print char with
122+  B924 2A 4F B9                 LD HL, (SCR_ATTR_PTR)
123+  B927 77                       LD (HL),A
124+  B928 21 4F B9                 LD HL, SCR_ATTR_PTR			; Get pointer to ATTR
125+  B92B 34                       INC (HL)					; Move Attribute cursor to next char
126+  B92C 21 4D B9     			LD HL, SCR_CUR_PTR
127+  B92F 34           			INC (HL)					; update Cursor pointer to next position
128+  B930 C9                       RET
129+  B931              ; ----------------------------------------------------------------------------------------
130+  B931
131+  B931
132+  B931
133+  B931              ; ----------------------------------------------------------------------------------------
134+  B931              ; INK2PAPER - moves ink of attribute stored in (PRINT_ATTR) to paper and sets ink to 0
135+  B931              ; 				Sets bright 1 and flash 0
136+  B931              ; ----------------------------------------------------------------------------------------
137+  B931 3A 51 B9     INK2PAPER:	LD A, (PRINT_ATTR)		    ; Get storedAttribute
138+  B934 E6 07                    AND 7						; get Attr INK in A
139+  B936 07           			RLCA
140+  B937 07           			RLCA
141+  B938 07           			RLCA						; move Ink to Paper
142+  B939 F6 40        			OR 64						; ink 0 bright 1
143+  B93B 32 51 B9     			LD (PRINT_ATTR),A		    ; Get storedAttribute
144+  B93E C9           			RET
145+  B93F              ; ----------------------------------------------------------------------------------------
146+  B93F
147+  B93F
148+  B93F
149+  B93F
150+  B93F 21 00 40     CLEARSCR:	LD HL,$4000					; Erases screen by writing 0 to all pixels and attributes
151+  B942 11 01 40     			LD DE,$4001
152+  B945 01 FF 1A     			LD BC,6911
153+  B948 36 00        			LD (HL),0
154+  B94A ED B0        			LDIR
155+  B94C C9           			RET
156+  B94D
157+  B94D
158+  B94D              SCR_CUR_PTR
158+  B94D 00 00          	db $00, $00				; Cursor Pointer in Screen (2 bytes) (HL)
159+  B94F 00 00        SCR_ATTR_PTR: 	db $00, $00				; Attr Pointer in Screen (2 bytes) (HL)
160+  B951 00           PRINT_ATTR:		db $00					; Attribute used by printchar routine (1 byte)
161+  B952
162+  B952              CHARSET: incbin "../charset.bin"			; Charset used
163+  BC52
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Functions/Printat.asm
 42   BC52                  INCLUDE "./Functions/Tetris_3D.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Functions/Tetris_3D.asm
  1+  BC52 FF 81 81 85  Tetro_3D:   DB $FF, $81, $81, $85, $85, $9D, $81, $FF ; Patrón para los bloques
  1+  BC56 85 9D 81 FF
  2+  BC5A
  3+  BC5A              TETRIS_3D:
  4+  BC5A 16 03            LD D,3              ; Los 3 bloques de píxeles
  5+  BC5C DD 21 00 40      LD IX,$4000         ; Dirección de comienzo de la VRAM
  6+  BC60
  7+  BC60              T3D3:
  8+  BC60
  9+  BC60 FD 21 52 BC      LD IY,Tetro_3D      ; Primer byte del patrón
 10+  BC64
 11+  BC64 0E 08            LD C,8              ; 8 bytes del patrón
 12+  BC66              T3D2:
 13+  BC66 06 00            LD B,0              ; 256 bytes de cada línea del patrón
 14+  BC68 FD 7E 00         LD a,(IY)           ; Cargo el valor del patrón
 15+  BC6B              T3D1:
 16+  BC6B DD 77 00         LD (IX),a           ; Cargo el patrón en la VideoRam
 17+  BC6E DD 23            INC IX              ; Siguientes 8 pixels
 18+  BC70 10 F9            DJNZ T3D1           ; Fin del bucle
 19+  BC72
 20+  BC72 0D               DEC C               ; Fin del 2º Bucle
 21+  BC73 FD 23            inc IY              ; Siguiente byte del patrón
 22+  BC75 20 EF            JR NZ,T3D2
 23+  BC77
 24+  BC77 15               DEC D               ; Fin del 3º bucle
 25+  BC78 20 E6            JR NZ, T3D3
 26+  BC7A
 27+  BC7A C9               RET
 28+  BC7B
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Functions/Tetris_3D.asm
 43   BC7B                  INCLUDE "./Functions/AtributeCoordinate.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Functions/AtributeCoordinate.asm
  1+  BC7B              ;-----------------------------------------------------------------------------------------
  2+  BC7B              ; DOTYXC - Identifies whether the user presses the Y key.
  3+  BC7B              ;	  IN - B = Y coordinate.
  4+  BC7B              ;          C = X coordinate.
  5+  BC7B              ;          A = Color (hex).
  6+  BC7B              ;-----------------------------------------------------------------------------------------
  7+  BC7B              DOTYXC:
  8+  BC7B F5               PUSH AF
  9+  BC7C
 10+  BC7C 68               LD L, B
 11+  BC7D 26 00            LD H, 0     ; HL = B
 12+  BC7F
 13+  BC7F 29               ADD HL, HL
 14+  BC80 29               ADD HL, HL
 15+  BC81 29               ADD HL, HL
 16+  BC82 29               ADD HL, HL
 17+  BC83 29               ADD HL, HL  ; HL = HL * 32
 18+  BC84
 19+  BC84 59               LD E, C
 20+  BC85 16 00            LD D, 0     ; DE = C
 21+  BC87
 22+  BC87 19               ADD HL, DE
 23+  BC88 11 00 58         LD DE, $5800
 24+  BC8B
 25+  BC8B 19               ADD HL, DE  ; HL = Y*32 + X + $5800
 26+  BC8C
 27+  BC8C 77               LD (HL), A
 28+  BC8D F1               POP AF
 29+  BC8E C9               RET
 30+  BC8F              ;-----------------------------------------------------------------------------------------
 31+  BC8F
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Functions/AtributeCoordinate.asm
 44   BC8F
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\Tetris.asm
