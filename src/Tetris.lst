# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\Tetris.asm
  1   0000                  DEVICE ZXSPECTRUM48
  2   0000              	SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION
  3   0000                  org $8000               ; Program located at $8000 = 32768.
  4   8000
  5   8000              BEGIN:
  6   8000 F3               DI              ; Disable interruptions.
  7   8001 31 00 00         LD SP, 0        ; Set the stack pointer to the top of memory.
  8   8004 21 00 58         LD HL, $5800    ; First square of the screen.
  9   8007
 10   8007              MAIN:
 11   8007 CD E0 B8         CALL CLEARSCR       ; Clean screen.
 12   800A CD 17 80         CALL STARTINGSCREEN ; Initial screen.
 13   800D CD 70 80         CALL GAMESCREEN     ; Game screen.
 14   8010 CD A5 80         CALL ENDINGSCREEN   ; End screen.
 15   8013
 16   8013              ENDOFCODE:
 17   8013 18 FE            JR ENDOFCODE
 18   8015
 19   8015              ; -------- VARIABLES -------
 20   8015 FF 1F        WAITING_TIME: DW $1FFF  ; Wait time (in ms).
 21   8017              WAITING_TIME_SUBTRACT EQU $10   ; Wait time decrement.
 22   8017              WAITING_TIME_TRESHOLD EQU $05
 23   8017
 24   8017              ; -------- SCREENS --------
 25   8017                  INCLUDE "./Screens/StartScreen.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Screens/StartScreen.asm
  1+  8017              ;-----------------------------------------------------------------------------------------
  2+  8017              ; STARTINGSCREEN - Displays the start screen with its corresponding messages.
  3+  8017              ;-----------------------------------------------------------------------------------------
  4+  8017              STARTINGSCREEN:
  5+  8017 CD 04 81             CALL LOADSTARTINGSCREEN
  6+  801A                      ; Would you like to play? (y/n)
  7+  801A 3E 39                LD A, $39              ; Attribute - Blue font with white background
  8+  801C 06 06                LD B, 6                ; Row
  9+  801E 0E 10                LD C, 16               ; Column
 10+  8020 DD 21 50 80          LD IX, PLAYMESSAGE1    ; Would you
 11+  8024 CD 6F B8             CALL PRINTAT
 12+  8027
 13+  8027 3E 39                LD A, $39              ; Attribute - Blue font with white background
 14+  8029 06 08                LD B, 8                ; Row
 15+  802B 0E 0E                LD C, 14               ; Column
 16+  802D DD 21 5B 80          LD IX, PLAYMESSAGE2    ; like to play
 17+  8031 CD 6F B8             CALL PRINTAT
 18+  8034
 19+  8034 3E 39                LD A, $39              ; Attribute - Blue font with white background
 20+  8036 06 0A                LD B, 10               ; Row
 21+  8038 0E 10                LD C, 16               ; Column
 22+  803A DD 21 69 80          LD IX, PLAYMESSAGE3    ; (Y/N)
 23+  803E CD 6F B8             CALL PRINTAT
 24+  8041
 25+  8041                      ; Cursor
 26+  8041 21 57 59             LD HL, $5800 + 10 * 32 + 23    ; Row 10, column 23
 27+  8044 36 8F                LD (HL), $8F
 28+  8046
 29+  8046 AF                   XOR A
 30+  8047 CD 4B B8             CALL READYKEY
 31+  804A FE 01                CP 1
 32+  804C C2 A5 80             JP NZ, ENDINGSCREEN ; Y - Game
 33+  804F C9                   RET                 ; N - End
 34+  8050              ;-----------------------------------------------------------------------------------------
 35+  8050
 36+  8050 57 4F 55 4C  PLAYMESSAGE1: DB "WOULD YOU ", 0
 36+  8054 44 20 59 4F
 36+  8058 55 20 00
 37+  805B 4C 49 4B 45  PLAYMESSAGE2: DB "LIKE TO PLAY?", 0
 37+  805F 20 54 4F 20
 37+  8063 50 4C 41 59
 37+  8067 3F 00
 38+  8069 20 28 59 2F  PLAYMESSAGE3: DB " (Y/N)", 0
 38+  806D 4E 29 00
 39+  8070
 40+  8070              ; TODO: Change cursor. It must echo de pressed key.
 41+  8070
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Screens/StartScreen.asm
 26   8070                  INCLUDE "./Screens/GameScreen.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Screens/GameScreen.asm
  1+  8070              ;-----------------------------------------------------------------------------------------
  2+  8070              ; GAMESCREEN - Selects the row for the first U border square and calls the TETRIS_3D
  3+  8070              ;              routine.
  4+  8070              ;-----------------------------------------------------------------------------------------
  5+  8070              GAMESCREEN:
  6+  8070 CD E0 B8         CALL CLEARSCR   ; Clean screen.
  7+  8073 CD FB BB         CALL TETRIS_3D
  8+  8076 06 01            LD B, 1     ; Square Row
  9+  8078              ;-----------------------------------------------------------------------------------------
 10+  8078
 11+  8078              ;-----------------------------------------------------------------------------------------
 12+  8078              ; VERTICAL_BORDER - Display the U vertical sides.
 13+  8078              ;-----------------------------------------------------------------------------------------
 14+  8078              VERTICAL_BORDER:
 15+  8078 0E 06            LD C, 6     ; Square Column
 16+  807A 3E 38            LD A, $38   ; Square color (hex) -> White
 17+  807C CD 1C BC         CALL DOTYXC ; Paint square
 18+  807F
 19+  807F F5               PUSH AF
 20+  8080 79               LD A, C
 21+  8081 C6 13            ADD TETRIS_WIDTH
 22+  8083 4F               LD C, A
 23+  8084 F1               POP AF
 24+  8085 CD 1C BC         CALL DOTYXC
 25+  8088
 26+  8088 78               LD A, B
 27+  8089 04               INC B
 28+  808A FE 15            CP TETRIS_HEIGHT
 29+  808C 20 EA            JR NZ, VERTICAL_BORDER
 30+  808E
 31+  808E 0E 06            LD C, 6     ; Square Column
 32+  8090              ;-----------------------------------------------------------------------------------------
 33+  8090
 34+  8090              ;-----------------------------------------------------------------------------------------
 35+  8090              ; HORIZONTAL_BORDER - Display the U bottom side.
 36+  8090              ;-----------------------------------------------------------------------------------------
 37+  8090              HORIZONTAL_BORDER:
 38+  8090 3E 38            LD A, $38   ; Square color (hex) -> White
 39+  8092 CD 1C BC         CALL DOTYXC ; Paint square
 40+  8095
 41+  8095 79               LD A, C
 42+  8096 0C               INC C
 43+  8097 FE 19            CP TETRIS_MAX_WIDTH
 44+  8099 20 F5            JR NZ, HORIZONTAL_BORDER
 45+  809B CD 12 B8         CALL PAINT
 46+  809E              ;-----------------------------------------------------------------------------------------
 47+  809E
 48+  809E              ;-----------------------------------------------------------------------------------------
 49+  809E              ; GAMELOOP - Game simulation.
 50+  809E              ;-----------------------------------------------------------------------------------------
 51+  809E              GAMELOOP:
 52+  809E 18 FE            JR GAMELOOP
 53+  80A0              ;-----------------------------------------------------------------------------------------
 54+  80A0
 55+  80A0              TETRIS_WIDTH EQU 19
 56+  80A0              TETRIS_MAX_WIDTH EQU 25
 57+  80A0              TETRIS_HEIGHT EQU 21
 58+  80A0 47 41 4D 45  GAMEMESSAGE: DB "GAME", 0
 58+  80A4 00
 59+  80A5
 60+  80A5              ; CALL DIBUJA
 61+  80A5              ; ESPERA (El tiempo de espera debe ser variable)
 62+  80A5              ; BORRAMOS LA FORMA
 63+  80A5              ; SUMAMOS 1 A LA FILA
 64+  80A5
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Screens/GameScreen.asm
 27   80A5                  INCLUDE "./Screens/EndScreen.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Screens/EndScreen.asm
  1+  80A5              ;-----------------------------------------------------------------------------------------
  2+  80A5              ; ENDINGSCREEN - Displays the end screen with its corresponding messages.
  3+  80A5              ;-----------------------------------------------------------------------------------------
  4+  80A5              ENDINGSCREEN:
  5+  80A5 CD E0 B8             CALL CLEARSCR   ; Clean screen.
  6+  80A8
  7+  80A8 CD 19 9C             CALL LOADENDINGSCREEN
  8+  80AB
  9+  80AB                      ; Bye!
 10+  80AB 3E 3B                LD A, $3B               ; Attribute - Pink font with white background
 11+  80AD 06 04                LD B, 4                 ; Row
 12+  80AF 0E 00                LD C, 0                 ; Column
 13+  80B1 DD 21 E8 80          LD IX, BYEMESSAGE       ; Bye!
 14+  80B5 CD 6F B8             CALL PRINTAT
 15+  80B8
 16+  80B8                      ; Play again? (Y/N)
 17+  80B8 3E 3B                LD A, $3B               ; Attribute - Pink font with white background
 18+  80BA 06 06                LD B, 6                 ; Row
 19+  80BC 0E 00                LD C, 0                 ; Column
 20+  80BE DD 21 ED 80          LD IX, PLAYAGAINMESSAGE ; Play again? (Y/N)
 21+  80C2 CD 6F B8             CALL PRINTAT
 22+  80C5
 23+  80C5                      ; Cursor
 24+  80C5 21 D1 58             LD HL, $5800 + 6 * 32 + 17    ; Row 6, column 17
 25+  80C8 36 9F                LD (HL), $9F
 26+  80CA
 27+  80CA AF                   XOR A
 28+  80CB CD 4B B8             CALL READYKEY
 29+  80CE FE 01                CP 1
 30+  80D0 CA 17 80             JP Z, STARTINGSCREEN    ; Y - Start screen
 31+  80D3 3E 3B                LD A, $3B               ; N - End of code.
 32+  80D5 06 08                LD B, 8
 33+  80D7 0E 0B                LD C, 11
 34+  80D9 DD 21 FF 80          LD IX, ENDMESSAGE       ; End!
 35+  80DD CD 6F B8             CALL PRINTAT
 36+  80E0 21 D1 58             LD HL, $5800 + 6 * 32 + 17    ; Row 10, column 23
 37+  80E3 36 38                LD (HL), $38
 38+  80E5
 39+  80E5 C3 13 80             JP ENDOFCODE
 40+  80E8              ;-----------------------------------------------------------------------------------------
 41+  80E8
 42+  80E8 42 59 45 21  BYEMESSAGE: DB "BYE!", 0
 42+  80EC 00
 43+  80ED 50 4C 41 59  PLAYAGAINMESSAGE: DB "PLAY AGAIN? (Y/N)", 0
 43+  80F1 20 41 47 41
 43+  80F5 49 4E 3F 20
 43+  80F9 28 59 2F 4E
 43+  80FD 29 00
 44+  80FF 45 4E 44 21  ENDMESSAGE: DB "END!", 0
 44+  8103 00
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Screens/EndScreen.asm
 28   8104                  INCLUDE "./Screens/LoadStartingScreen.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Screens/LoadStartingScreen.asm
  1+  8104              ;-----------------------------------------------------------------------------------------
  2+  8104              ; LOADSTARTINGSCREEN_LOOP - Set values to paint the graphic.
  3+  8104              ;-----------------------------------------------------------------------------------------
  4+  8104              LOADSTARTINGSCREEN:
  5+  8104 21 19 81         LD HL, LOADSTARTINGSCREEN_START ; HL = Starting addres of screen data
  6+  8107
  7+  8107                  ; Save used registers
  8+  8107 C5               PUSH BC
  9+  8108 D5               PUSH DE
 10+  8109
 11+  8109 11 00 40         LD DE, $4000 ; Display to video memory area
 12+  810C 01 00 1B         LD BC, 6912  ; VidkeoRAM size
 13+  810F              ;-----------------------------------------------------------------------------------------
 14+  810F
 15+  810F              ;-----------------------------------------------------------------------------------------
 16+  810F              ; LOADSTARTINGSCREEN_LOOP - Displays the start screen graphic.
 17+  810F              ;-----------------------------------------------------------------------------------------
 18+  810F              LOADSTARTINGSCREEN_LOOP:
 19+  810F ED A0            LDI ; (DE) = (HL) , DE++, HL++, BC--
 20+  8111
 21+  8111 78               LD A, B ; Check if BC is 0
 22+  8112 B1               OR C ; BC = 0 <=> B|C=0
 23+  8113 C2 0F 81         JP NZ, LOADSTARTINGSCREEN_LOOP ; Next display byte
 24+  8116
 25+  8116                  ; Retrieve used registers
 26+  8116 D1               POP DE
 27+  8117 C1               POP BC
 28+  8118
 29+  8118 C9               RET
 30+  8119              ;-----------------------------------------------------------------------------------------
 31+  8119
 32+  8119              LOADSTARTINGSCREEN_START: INCBIN "../GraphicScreens/StartingScreenTetris.scr"
 33+  9C19
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Screens/LoadStartingScreen.asm
 29   9C19                  INCLUDE "./Screens/LoadEndingScreen.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Screens/LoadEndingScreen.asm
  1+  9C19              ;-----------------------------------------------------------------------------------------
  2+  9C19              ; LOADENDINGSCREEN -  Set values to paint the graphic.
  3+  9C19              ;-----------------------------------------------------------------------------------------
  4+  9C19              LOADENDINGSCREEN:
  5+  9C19 21 2E 9C         LD HL, LOADSTARTINGSCREEN_END ; HL = Starting addres of screen data
  6+  9C1C
  7+  9C1C                  ; Save used registers
  8+  9C1C C5               PUSH BC
  9+  9C1D D5               PUSH DE
 10+  9C1E
 11+  9C1E 11 00 40         LD DE, $4000 ; Display to video memory area
 12+  9C21 01 00 1B         LD BC, 6912  ; VidkeoRAM size
 13+  9C24              ;-----------------------------------------------------------------------------------------
 14+  9C24
 15+  9C24              ;-----------------------------------------------------------------------------------------
 16+  9C24              ; LOADENDINGSCREEN_LOOP - Displays the end screen graphic.
 17+  9C24              ;-----------------------------------------------------------------------------------------
 18+  9C24              LOADENDINGSCREEN_LOOP:
 19+  9C24 ED A0            LDI ; (DE) = (HL) , DE++, HL++, BC--
 20+  9C26
 21+  9C26 78               LD A, B ; Check if BC is 0
 22+  9C27 B1               OR C ; BC = 0 <=> B|C=0
 23+  9C28 C2 24 9C         JP NZ, LOADENDINGSCREEN_LOOP ; Next display byte
 24+  9C2B
 25+  9C2B                  ; Retrieve used registers
 26+  9C2B D1               POP DE
 27+  9C2C C1               POP BC
 28+  9C2D
 29+  9C2D C9               RET
 30+  9C2E              ;-----------------------------------------------------------------------------------------
 31+  9C2E
 32+  9C2E              LOADSTARTINGSCREEN_END: INCBIN "../GraphicScreens/EndingScreenTetris.scr"
 33+  B72E
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Screens/LoadEndingScreen.asm
 30   B72E
 31   B72E              ; -------- TETROMINOS --------
 32   B72E                  INCLUDE "./Tetrominos/Tetrominos.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Tetrominos/Tetrominos.asm
  1+  B72E              ;-----------------------------------------------------------------------------------------
  2+  B72E              ; Name: DB rows, columns, i, i, i, i, i, i: DW left, right
  3+  B72E              ;-----------------------------------------------------------------------------------------
  4+  B72E
  5+  B72E              ; O block (Yellow) - All four rotations are the same
  6+  B72E 02 02 30 30  T_0: DB 2, 2, 6*8, 6*8, 6*8, 6*8, 0, 0
  6+  B732 30 30 00 00
  6+  B736 2E B7 2E B7    DW T_0, T_0
  7+  B73A
  8+  B73A              ; I block (Cyan) - Vertical and horizontal rotations are the same among them
  9+  B73A 04 01 28 28  T_I1: DB 4, 1, 5*8, 5*8, 5*8, 5*8, 0, 0
  9+  B73E 28 28 00 00
  9+  B742 46 B7 46 B7    DW T_I2, T_I2
 10+  B746 01 04 28 28  T_I2: DB 1, 4, 5*8, 5*8, 5*8, 5*8, 0, 0
 10+  B74A 28 28 00 00
 10+  B74E 3A B7 3A B7    DW T_I1, T_I1
 11+  B752
 12+  B752              ; Z block (Red) - Vertical and horizontal rotations are the same among them
 13+  B752 02 03 10 10  T_Z1: DB 2, 3, 2*8, 2*8, 0, 0, 2*8, 2*8
 13+  B756 00 00 10 10
 13+  B75A 5E B7 5E B7    DW T_Z2, T_Z2
 14+  B75E 03 02 00 10  T_Z2: DB 3, 2, 0, 2*8, 2*8, 2*8, 2*8, 0
 14+  B762 10 10 10 00
 14+  B766 52 B7 52 B7    DW T_Z1, T_Z1
 15+  B76A
 16+  B76A              ; S block (Green) - Vertical and horizontal rotations are the same among them
 17+  B76A 02 03 00 20  T_S1: DB 2, 3, 0, 4*8, 4*8, 4*8, 4*8, 0
 17+  B76E 20 20 20 00
 17+  B772 76 B7 76 B7    DW T_S2, T_S2
 18+  B776 03 02 20 00  T_S2: DB 3, 2, 4*8, 0, 4*8, 4*8, 0, 4*8
 18+  B77A 20 20 00 20
 18+  B77E 6A B7 6A B7    DW T_S1, T_S1
 19+  B782
 20+  B782              ; L block (Dark Yellow) -  Four rotations
 21+  B782 03 02 70 00  T_L1: DB 3, 2, 14*8, 0, 14*8, 0, 14*8, 14*8
 21+  B786 70 00 70 70
 21+  B78A A6 B7 8E B7    DW T_L4, T_L2
 22+  B78E 02 03 70 70  T_L2: DB 2, 3, 14*8, 14*8, 14*8, 14*8, 0, 0
 22+  B792 70 70 00 00
 22+  B796 82 B7 9A B7    DW T_L1, T_L3
 23+  B79A 03 02 70 70  T_L3: DB 3, 2, 14*8, 14*8, 0, 14*8, 0, 14*8
 23+  B79E 00 70 00 70
 23+  B7A2 8E B7 A6 B7    DW T_L2, T_L4
 24+  B7A6 02 03 00 00  T_L4: DB 2, 3, 0, 0, 14*8, 14*8, 14*8, 14*8
 24+  B7AA 70 70 70 70
 24+  B7AE 9A B7 82 B7    DW T_L3, T_L1
 25+  B7B2
 26+  B7B2              ; J block (Dark Blue) - Four rotations
 27+  B7B2 03 02 00 08  T_J1: DB 3, 2, 0, 8, 0, 8, 8, 8
 27+  B7B6 00 08 08 08
 27+  B7BA D6 B7 BE B7    DW T_J4, T_J2
 28+  B7BE 02 03 08 00  T_J2: DB 2, 3, 8, 0, 0, 8, 8, 8
 28+  B7C2 00 08 08 08
 28+  B7C6 B2 B7 CA B7    DW T_J1, T_J3
 29+  B7CA 03 02 08 08  T_J3: DB 3, 2, 8, 8, 8, 0, 8, 0
 29+  B7CE 08 00 08 00
 29+  B7D2 BE B7 D6 B7    DW T_J2, T_J4
 30+  B7D6 02 03 08 08  T_J4: DB 2, 3, 8, 8, 8, 0, 0, 8
 30+  B7DA 08 00 00 08
 30+  B7DE CA B7 B2 B7    DW T_J3, T_J1
 31+  B7E2
 32+  B7E2              ; T block (Purple) - Four rotations
 33+  B7E2 02 03 18 18  T_T1: DB 2, 3, 3*8, 3*8, 3*8, 0, 3*8, 0
 33+  B7E6 18 00 18 00
 33+  B7EA 06 B8 EE B7    DW T_T4, T_T2
 34+  B7EE 03 02 00 18  T_T2: DB 3, 2, 0, 3*8, 3*8, 3*8, 0, 3*8
 34+  B7F2 18 18 00 18
 34+  B7F6 E2 B7 FA B7    DW T_T1, T_T3
 35+  B7FA 02 03 00 18  T_T3: DB 2, 3, 0, 3*8, 0, 3*8, 3*8, 3*8
 35+  B7FE 00 18 18 18
 35+  B802 EE B7 06 B8    DW T_T2, T_T4
 36+  B806 03 02 18 00  T_T4: DB 3, 2, 3*8, 0, 3*8, 3*8, 3*8, 0
 36+  B80A 18 18 18 00
 36+  B80E FA B7 E2 B7    DW T_T3, T_T1
 37+  B812              ;-----------------------------------------------------------------------------------------
 38+  B812
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Tetrominos/Tetrominos.asm
 33   B812                  INCLUDE "./Tetrominos/PaintTetrominos.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Tetrominos/PaintTetrominos.asm
  1+  B812              ; IX - Tetromino pointer
  2+  B812              ; Ancho EQU IC1 - IB0
  3+  B812              PAINT:
  4+  B812 21 00 58         LD HL, 0x5800
  5+  B815 DD 21 2E B7      LD IX, T_0
  6+  B819 DD E5 FD E1      LD IY, IX
  7+  B81D DD 5E 00         LD E, (IX)      ; Rows
  8+  B820 06 01            LD B, 1
  9+  B822 FD 23            INC IY
  9+  B824 FD 23          INC IY
 10+  B826
 11+  B826              OUTERLOOP:
 12+  B826 DD 56 01         LD D, (IX + 1)  ; Columns
 13+  B829 0E 01            LD C, 1
 14+  B82B
 15+  B82B              INNERLOOP:
 16+  B82B FD 7E 00         LD A, (IY)          ; A = Square
 17+  B82E FD 23            INC IY              ; Next square
 18+  B830 FE 00            CP 0                ; Square = 0
 19+  B832 C2 38 B8         JP NZ, PAINTLOOP2   ; If so, paint
 20+  B835 C3 3B B8         JP CHECKCOLUMNS     ; Else, skip
 21+  B838
 22+  B838              PAINTLOOP2:
 23+  B838 CD 1C BC         CALL DOTYXC
 24+  B83B              CHECKCOLUMNS:
 25+  B83B 7A               LD A, D             ; A = C
 26+  B83C FE 00            CP 0                ; Column = 0?
 27+  B83E 15               DEC D               ; Column -= 1
 28+  B83F 0C               INC C
 29+  B840 C2 2B B8         JP NZ, INNERLOOP    ; Yes - Paint
 30+  B843 04               INC B
 31+  B844 7B               LD A, E
 32+  B845 FE 00            CP 0
 33+  B847 1D               DEC E
 34+  B848 C2 26 B8         JP NZ, OUTERLOOP
 35+  B84B
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Tetrominos/PaintTetrominos.asm
 34   B84B
 35   B84B              ; -------- FUNCTIONS --------
 36   B84B                  INCLUDE "./Functions/ReadKey.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Functions/ReadKey.asm
  1+  B84B              ;-----------------------------------------------------------------------------------------
  2+  B84B              ; READYKEY - Identifies whether the user presses the Y key.
  3+  B84B              ;	OUT - A = 1 if Y key is pressed.
  4+  B84B              ;-----------------------------------------------------------------------------------------
  5+  B84B              READYKEY:
  6+  B84B 01 FE DF             LD BC, $DFFE       ; Keys: Y, U, I, O, P
  7+  B84E ED 78                IN A, (C)
  8+  B850 CB 67                BIT 4, A        ; Key Y
  9+  B852 20 09                JR NZ, READNKEY
 10+  B854              LOOPY:
 11+  B854 ED 78                IN A, (C)
 12+  B856 FE FF                CP $FF
 13+  B858 20 FA                JR NZ, LOOPY
 14+  B85A 3E 01                LD A, 1
 15+  B85C C9                   RET
 16+  B85D              ;-----------------------------------------------------------------------------------------
 17+  B85D
 18+  B85D
 19+  B85D              ;-----------------------------------------------------------------------------------------
 20+  B85D              ; READNKEY - Identifies whether the user presses the N key.
 21+  B85D              ;	OUT - A = 2 if N key is pressed.
 22+  B85D              ;-----------------------------------------------------------------------------------------
 23+  B85D              READNKEY:
 24+  B85D 3E 7F                LD A, $7F       ; Keys: B, N, M, SYMB, SPACE
 25+  B85F DB FE                IN A, ($FE)
 26+  B861 CB 5F                BIT 3, A        ; Key N
 27+  B863 20 E6                JR NZ, READYKEY
 28+  B865              LOOPN:
 29+  B865 ED 78                IN A, (C)
 30+  B867 FE FF                CP $FF
 31+  B869 20 FA                JR NZ, LOOPN
 32+  B86B 3E 02                LD A, 2
 33+  B86D C9                   RET
 34+  B86E C9                   RET
 35+  B86F              ;-----------------------------------------------------------------------------------------
 36+  B86F
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Functions/ReadKey.asm
 37   B86F                  INCLUDE "./Functions/Printat.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Functions/Printat.asm
  1+  B86F              ; -------------------------------
  2+  B86F              ; ZX Spectrum Text print library
  3+  B86F              ; Daniel León - AOC - UFV 2020
  4+  B86F              ; -------------------------------
  5+  B86F
  6+  B86F
  7+  B86F              ; ----------------------------------------------------------------------------------------
  8+  B86F              ; PRINTAT - Print a string in a position and attributes as per registers:
  9+  B86F              ;		IN	A	: Bit 7=1 For Flash / Bit 6=1 For Brigh / Bit 5,4,3 for Paper / Bit 2,1,0 for Ink
 10+  B86F              ;		IN	B	: Row 0..23
 11+  B86F              ;		IN	C	: Column 0..31
 12+  B86F              ;		IN	IX	: Address of text (Text must end in a 0)
 13+  B86F              ; ----------------------------------------------------------------------------------------
 14+  B86F CD 7E B8     PRINTAT:	CALL PREP_PRT				; Update Attribute var &Screen & Attributes pointers
 15+  B872              ; ----------------------------------------------------------------------------------------
 16+  B872              ;		VVV Do not move PRINTSTR below as PRINTAT continues into PRINTSTR routine
 17+  B872              ; ----------------------------------------------------------------------------------------
 18+  B872              ; PRINTSTR - Prints String - IX Points to the String start
 19+  B872              ; ----------------------------------------------------------------------------------------
 20+  B872 DD 7E 00     PRINTSTR:   LD A,(IX)					; A Contains first char to print
 21+  B875 B7           			OR A						; check for end of string (0)
 22+  B876 C8           			RET Z						; Finish printing if 0
 23+  B877 CD AC B8     			CALL PRINTCHNUM
 24+  B87A DD 23        			INC IX						; Move to next char in string
 25+  B87C 18 F4        			JR PRINTSTR					; Start over printing sequence
 26+  B87E              ; ----------------------------------------------------------------------------------------
 27+  B87E
 28+  B87E
 29+  B87E              ;-----------------------------------------------------------------------------------------
 30+  B87E              ; PREP_PRT - Updates Print_Attr, SCR & ATTR Vars
 31+  B87E              ;-----------------------------------------------------------------------------------------
 32+  B87E 32 F2 B8     PREP_PRT:	LD (PRINT_ATTR),A			; Set Attribute
 33+  B881 CD 87 B8     PREP_PRT_2:	CALL CRtoSCREEN
 34+  B884 C3 99 B8     			JP CRtoATTR
 35+  B887              ;-----------------------------------------------------------------------------------------
 36+  B887
 37+  B887              ;-----------------------------------------------------------------------------------------
 38+  B887              ; CRtoSCREEN - Converts a scr char coord into a SCREEN Address   b,c = y,x positions
 39+  B887              ;	IN  - B=Row, C=Column
 40+  B887              ;	OUT - HL=Address in screen also stored in (SCR_CUR_PTR)
 41+  B887              ;	Conversion:
 42+  B887              ;			Row FFfff   Column CCCCC
 43+  B887              ;			HL=%010FF000 fffCCCCC
 44+  B887              ;-----------------------------------------------------------------------------------------
 45+  B887              CRtoSCREEN:
 46+  B887 78           			LD A,B						; %___FFfff
 47+  B888 F6 40        			OR #40						; %010FFfff
 48+  B88A E6 F8        			AND #F8						; %010FF000
 49+  B88C 67           			LD H,A
 50+  B88D
 51+  B88D 78           			LD A,B						; %___FFfff
 52+  B88E E6 07        			AND #7						; %00000fff
 53+  B890 0F           			RRCA						; %f00000ff
 54+  B891 0F           			RRCA						; %ff00000f
 55+  B892 0F           			RRCA						; %fff00000
 56+  B893 B1           			OR C						; %fffCCCCC
 57+  B894 6F           			LD L,A
 58+  B895 22 EE B8                 LD (SCR_CUR_PTR),HL			; Update Variable
 59+  B898 C9                       RET
 60+  B899              ; ----------------------------------------------------------------------------------------
 61+  B899
 62+  B899
 63+  B899
 64+  B899              ;-----------------------------------------------------------------------------------------
 65+  B899              ; CRtoATTR - Converts a screen char coord  into a ATTR Address  b,c = y,x positions
 66+  B899              ;	IN  - B=Row, C=Column
 67+  B899              ;	OUT - HL=Address in screen also stored in (SCR_ATTR_PTR)
 68+  B899              ;	Conversion:
 69+  B899              ;			Row FFfff   Column CCCCC
 70+  B899              ;			HL=%010110FF fffCCCCC
 71+  B899              ;-----------------------------------------------------------------------------------------
 72+  B899              CRtoATTR:
 73+  B899 78           			LD A,B						; %___FFfff
 74+  B89A 0F           			RRCA						; %f000FFff
 75+  B89B 0F           			RRCA						; %ff000FFf
 76+  B89C 0F           			RRCA						; %fff000FF
 77+  B89D 6F           			LD L,A
 78+  B89E E6 03        			AND 3						; %000000FF	value of FF can be only 00,01,10
 79+  B8A0 F6 58        			OR #58						; %010110FF value will be #58, #59 or #5A
 80+  B8A2 67           			LD H,A
 81+  B8A3
 82+  B8A3 7D           			LD A,L						; %fff000FF
 83+  B8A4 E6 E0        			AND #E0						; %fff00000
 84+  B8A6 B1           			OR C						; %fffCCCCC
 85+  B8A7 6F           			LD L,A
 86+  B8A8
 87+  B8A8 22 F0 B8                 LD (SCR_ATTR_PTR),HL		; Update Variable
 88+  B8AB C9                       RET
 89+  B8AC              ; ----------------------------------------------------------------------------------------
 90+  B8AC
 91+  B8AC
 92+  B8AC
 93+  B8AC              ; ----------------------------------------------------------------------------------------
 94+  B8AC              ; PRINTCHNUM - Prints Char Number N (stored in A)
 95+  B8AC              ;-----------------------------------------------------------------------------------------
 96+  B8AC              PRINTCHNUM:	;SUB 32						; Adjust Ascii to charset
 97+  B8AC 26 00        			LD H,0						; Multiply value by 8 to get to right Char in Charset
 98+  B8AE 6F           			LD L,A
 99+  B8AF 29           			ADD HL,HL
100+  B8B0 29           			ADD HL,HL
101+  B8B1 29           			ADD HL,HL
102+  B8B2 11 F3 B7     			LD DE, CHARSET-(8*32)		; Optimize in compile time (instead of sub 32)
103+  B8B5 19           			ADD HL,DE
104+  B8B6 EB           			EX  DE,HL					;Value in DE
105+  B8B7              			; Continues to printchar below
106+  B8B7              ; ----------------------------------------------------------------------------------------
107+  B8B7
108+  B8B7
109+  B8B7              ; ----------------------------------------------------------------------------------------
110+  B8B7              ; PRINTCHAR - Prints Char  (DE points to the char. Uses HL as last Cur Pointer)
111+  B8B7              ; ----------------------------------------------------------------------------------------
112+  B8B7              PRINTCHAR:
113+  B8B7 06 08        			LD B,8						; 8 Lines per char
114+  B8B9 2A EE B8                 LD HL, (SCR_CUR_PTR)		; Load Cursor Pointer y,x
115+  B8BC
116+  B8BC 1A           BYTEPCHAR:	LD A,(DE)					; Get Char to be printed, first line
117+  B8BD 77           			LD (HL),A					; Move to Printing location
118+  B8BE 24                       INC H						; inc H so next line in char (ZX Spectrum Screen RAM)
119+  B8BF 13                       INC DE 						; next line to be printed
120+  B8C0 10 FA                    DJNZ BYTEPCHAR				; Repeat 8 lines
121+  B8C2 3A F2 B8                 LD A,(PRINT_ATTR) 			; Load Attributes to print char with
122+  B8C5 2A F0 B8                 LD HL, (SCR_ATTR_PTR)
123+  B8C8 77                       LD (HL),A
124+  B8C9 21 F0 B8                 LD HL, SCR_ATTR_PTR			; Get pointer to ATTR
125+  B8CC 34                       INC (HL)					; Move Attribute cursor to next char
126+  B8CD 21 EE B8     			LD HL, SCR_CUR_PTR
127+  B8D0 34           			INC (HL)					; update Cursor pointer to next position
128+  B8D1 C9                       RET
129+  B8D2              ; ----------------------------------------------------------------------------------------
130+  B8D2
131+  B8D2
132+  B8D2
133+  B8D2              ; ----------------------------------------------------------------------------------------
134+  B8D2              ; INK2PAPER - moves ink of attribute stored in (PRINT_ATTR) to paper and sets ink to 0
135+  B8D2              ; 				Sets bright 1 and flash 0
136+  B8D2              ; ----------------------------------------------------------------------------------------
137+  B8D2 3A F2 B8     INK2PAPER:	LD A, (PRINT_ATTR)		    ; Get storedAttribute
138+  B8D5 E6 07                    AND 7						; get Attr INK in A
139+  B8D7 07           			RLCA
140+  B8D8 07           			RLCA
141+  B8D9 07           			RLCA						; move Ink to Paper
142+  B8DA F6 40        			OR 64						; ink 0 bright 1
143+  B8DC 32 F2 B8     			LD (PRINT_ATTR),A		    ; Get storedAttribute
144+  B8DF C9           			RET
145+  B8E0              ; ----------------------------------------------------------------------------------------
146+  B8E0
147+  B8E0
148+  B8E0
149+  B8E0
150+  B8E0 21 00 40     CLEARSCR:	LD HL,$4000					; Erases screen by writing 0 to all pixels and attributes
151+  B8E3 11 01 40     			LD DE,$4001
152+  B8E6 01 FF 1A     			LD BC,6911
153+  B8E9 36 00        			LD (HL),0
154+  B8EB ED B0        			LDIR
155+  B8ED C9           			RET
156+  B8EE
157+  B8EE
158+  B8EE              SCR_CUR_PTR
158+  B8EE 00 00          	db $00, $00				; Cursor Pointer in Screen (2 bytes) (HL)
159+  B8F0 00 00        SCR_ATTR_PTR: 	db $00, $00				; Attr Pointer in Screen (2 bytes) (HL)
160+  B8F2 00           PRINT_ATTR:		db $00					; Attribute used by printchar routine (1 byte)
161+  B8F3
162+  B8F3              CHARSET: incbin "../charset.bin"			; Charset used
163+  BBF3
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Functions/Printat.asm
 38   BBF3                  INCLUDE "./Functions/Tetris_3D.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Functions/Tetris_3D.asm
  1+  BBF3 FF 81 81 85  Tetro_3D:   DB $FF, $81, $81, $85, $85, $9D, $81, $FF ; Patrón para los bloques
  1+  BBF7 85 9D 81 FF
  2+  BBFB
  3+  BBFB              TETRIS_3D:
  4+  BBFB 16 03            LD D,3              ; Los 3 bloques de píxeles
  5+  BBFD DD 21 00 40      LD IX,$4000         ; Dirección de comienzo de la VRAM
  6+  BC01
  7+  BC01              T3D3:
  8+  BC01
  9+  BC01 FD 21 F3 BB      LD IY,Tetro_3D      ; Primer byte del patrón
 10+  BC05
 11+  BC05 0E 08            LD C,8              ; 8 bytes del patrón
 12+  BC07              T3D2:
 13+  BC07 06 00            LD B,0              ; 256 bytes de cada línea del patrón
 14+  BC09 FD 7E 00         LD a,(IY)           ; Cargo el valor del patrón
 15+  BC0C              T3D1:
 16+  BC0C DD 77 00         LD (IX),a           ; Cargo el patrón en la VideoRam
 17+  BC0F DD 23            INC IX              ; Siguientes 8 pixels
 18+  BC11 10 F9            DJNZ T3D1           ; Fin del bucle
 19+  BC13
 20+  BC13 0D               DEC C               ; Fin del 2º Bucle
 21+  BC14 FD 23            inc IY              ; Siguiente byte del patrón
 22+  BC16 20 EF            JR NZ,T3D2
 23+  BC18
 24+  BC18 15               DEC D               ; Fin del 3º bucle
 25+  BC19 20 E6            JR NZ, T3D3
 26+  BC1B
 27+  BC1B C9               RET
 28+  BC1C
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Functions/Tetris_3D.asm
 39   BC1C                  INCLUDE "./Functions/AtributeCoordinate.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Functions/AtributeCoordinate.asm
  1+  BC1C              ;-----------------------------------------------------------------------------------------
  2+  BC1C              ; DOTYXC - Identifies whether the user presses the Y key.
  3+  BC1C              ;	  IN - B = Y coordinate.
  4+  BC1C              ;          C = X coordinate.
  5+  BC1C              ;          A = Color (hex).
  6+  BC1C              ;-----------------------------------------------------------------------------------------
  7+  BC1C              DOTYXC:
  8+  BC1C F5               PUSH AF
  9+  BC1D 68               LD L, B
 10+  BC1E 26 00            LD H, 0     ; HL = B
 11+  BC20
 12+  BC20 29               ADD HL, HL
 13+  BC21 29               ADD HL, HL
 14+  BC22 29               ADD HL, HL
 15+  BC23 29               ADD HL, HL
 16+  BC24 29               ADD HL, HL  ; HL = HL *32
 17+  BC25
 18+  BC25 59               LD E, C
 19+  BC26 16 00            LD D, 0     ; DE = C
 20+  BC28
 21+  BC28 19               ADD HL, DE
 22+  BC29 11 00 58         LD DE, $5800
 23+  BC2C
 24+  BC2C 19               ADD HL, DE  ; HL = Y*32 + X + $5800
 25+  BC2D
 26+  BC2D 77               LD (HL), A
 27+  BC2E F1               POP AF
 28+  BC2F C9               RET
 29+  BC30              ;-----------------------------------------------------------------------------------------
 30+  BC30
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\./Functions/AtributeCoordinate.asm
 40   BC30
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\Tetris.asm
