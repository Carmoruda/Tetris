# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\StartScreen.asm
  1   0000                      DEVICE ZXSPECTRUM48
  2   0000              	SLDOPT COMMENT WPMEM, LOGPOINT, ASSERTION
  3   0000                      org $8000               ; Program located at $8000 = 32768.
  4   8000
  5   8000              BEGIN:
  6   8000 F3                   DI              ; Disable interruptions.
  7   8001 31 00 00             LD SP, 0        ; Set the stack pointer to the top of memory.
  8   8004 21 00 58             LD HL, $5800    ; First square of the screen.
  9   8007
 10   8007              MAIN:
 11   8007 CD 8C 81             CALL CLEARSCR   ; Clean screen.
 12   800A
 13   800A              ;-----------------------------------------------------------------------------------------
 14   800A              ; STARTINGSCREEN - Displays the start screen with its corresponding messages.
 15   800A              ;-----------------------------------------------------------------------------------------
 16   800A              STARTINGSCREEN:
 17   800A CD 9F 84             CALL LOADSTARTINGSCREEN
 18   800D                      ; Would you like to play? (y/n)
 19   800D 3E 39                LD A, $39              ; Attribute - Blue font with white background
 20   800F 06 06                LD B, 6                ; Row
 21   8011 0E 10                LD C, 16               ; Column
 22   8013 DD 21 46 80          LD IX, PLAYMESSAGE1    ; Would you
 23   8017 CD 1B 81             CALL PRINTAT
 24   801A
 25   801A 3E 39                LD A, $39              ; Attribute - Blue font with white background
 26   801C 06 08                LD B, 8                ; Row
 27   801E 0E 0E                LD C, 14               ; Column
 28   8020 DD 21 51 80          LD IX, PLAYMESSAGE2    ; like to play
 29   8024 CD 1B 81             CALL PRINTAT
 30   8027
 31   8027 3E 39                LD A, $39              ; Attribute - Blue font with white background
 32   8029 06 0A                LD B, 10               ; Row
 33   802B 0E 10                LD C, 16               ; Column
 34   802D DD 21 5F 80          LD IX, PLAYMESSAGE3    ; (Y/N)
 35   8031 CD 1B 81             CALL PRINTAT
 36   8034
 37   8034                      ; Cursor
 38   8034 21 57 59             LD HL, $5800 + 10 * 32 + 23    ; Row 10, column 23
 39   8037 36 8F                LD (HL), $8F
 40   8039
 41   8039 AF                   XOR A
 42   803A CD F7 80             CALL READYKEY
 43   803D FE 01                CP 1
 44   803F CA 66 80             JP Z, GAMESCREEN        ; Y - Game
 45   8042 18 54                JR ENDINGSCREEN         ; N - End screen
 46   8044              ;-----------------------------------------------------------------------------------------
 47   8044
 48   8044              ENDOFCODE:
 49   8044 18 FE                JR ENDOFCODE
 50   8046
 51   8046 57 4F 55 4C  PLAYMESSAGE1: DB "WOULD YOU ", 0
 51   804A 44 20 59 4F
 51   804E 55 20 00
 52   8051 4C 49 4B 45  PLAYMESSAGE2: DB "LIKE TO PLAY?", 0
 52   8055 20 54 4F 20
 52   8059 50 4C 41 59
 52   805D 3F 00
 53   805F 20 28 59 2F  PLAYMESSAGE3: DB " (Y/N)", 0
 53   8063 4E 29 00
 54   8066
 55   8066                      INCLUDE "GameScreen.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\GameScreen.asm
  1+  8066              ;-----------------------------------------------------------------------------------------
  2+  8066              ; GAMESCREEN - Displays the game screen with its corresponding messages.
  3+  8066              ;-----------------------------------------------------------------------------------------
  4+  8066              GAMESCREEN:
  5+  8066 CD 8C 81             CALL CLEARSCR   ; Clean screen.
  6+  8069
  7+  8069              TETRIS_BORDERS:
  8+  8069 CD D1 BA         CALL TETRIS_3D
  9+  806C
 10+  806C 06 01            LD B, 1     ; Square Row
 11+  806E              VERTICAL_BORDER:
 12+  806E 0E 06            LD C, 6     ; Square Column
 13+  8070 3E 38            LD A, $38   ; Square color (hex) -> White
 14+  8072 CD F2 BA         CALL DOTYXC ; Paint square
 15+  8075
 16+  8075 F5               PUSH AF
 17+  8076 79               LD A, C
 18+  8077 C6 13            ADD TETRIS_WIDTH
 19+  8079 4F               LD C, A
 20+  807A F1               POP AF
 21+  807B CD F2 BA         CALL DOTYXC
 22+  807E
 23+  807E 78               LD A, B
 24+  807F 04               INC B
 25+  8080 FE 15            CP TETRIS_HEIGHT
 26+  8082 20 EA            JR NZ, VERTICAL_BORDER
 27+  8084
 28+  8084 0E 06            LD C, 6     ; Square Column
 29+  8086              HORIZONTAL_BORDER:
 30+  8086 3E 38            LD A, $38
 31+  8088 CD F2 BA         CALL DOTYXC
 32+  808B
 33+  808B 79               LD A, C
 34+  808C 0C               INC C
 35+  808D FE 19            CP TETRIS_MAX_WIDTH
 36+  808F 20 F5            JR NZ, HORIZONTAL_BORDER
 37+  8091
 38+  8091
 39+  8091
 40+  8091              ;-----------------------------------------------------------------------------------------
 41+  8091
 42+  8091              ;-----------------------------------------------------------------------------------------
 43+  8091              ; GAMELOOP - Game simulation.
 44+  8091              ;-----------------------------------------------------------------------------------------
 45+  8091              GAMELOOP:
 46+  8091 18 FE            JR GAMELOOP
 47+  8093              ;-----------------------------------------------------------------------------------------
 48+  8093
 49+  8093              TETRIS_WIDTH EQU 19
 50+  8093              TETRIS_MAX_WIDTH EQU 25
 51+  8093              TETRIS_HEIGHT EQU 21
 52+  8093 47 41 4D 45  GAMEMESSAGE: DB "GAME", 0        ; 0 = delimitador de array.
 52+  8097 00
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\GameScreen.asm
 56   8098                      INCLUDE "EndScreen.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\EndScreen.asm
  1+  8098              ;-----------------------------------------------------------------------------------------
  2+  8098              ; ENDINGSCREEN - Displays the end screen with its corresponding messages.
  3+  8098              ;-----------------------------------------------------------------------------------------
  4+  8098              ENDINGSCREEN:
  5+  8098 CD 8C 81             CALL CLEARSCR   ; Clean screen.
  6+  809B
  7+  809B CD B4 9F             CALL LOADENDINGSCREEN
  8+  809E
  9+  809E                      ; Bye!
 10+  809E 3E 3B                LD A, $3B               ; Attribute - Pink font with white background
 11+  80A0 06 04                LD B, 4                 ; Row
 12+  80A2 0E 00                LD C, 0                 ; Column
 13+  80A4 DD 21 DB 80          LD IX, BYEMESSAGE       ; Bye!
 14+  80A8 CD 1B 81             CALL PRINTAT
 15+  80AB
 16+  80AB                      ; Play again? (Y/N)
 17+  80AB 3E 3B                LD A, $3B               ; Attribute - Pink font with white background
 18+  80AD 06 06                LD B, 6                 ; Row
 19+  80AF 0E 00                LD C, 0                 ; Column
 20+  80B1 DD 21 E0 80          LD IX, PLAYAGAINMESSAGE ; Play again? (Y/N)
 21+  80B5 CD 1B 81             CALL PRINTAT
 22+  80B8
 23+  80B8                      ; Cursor
 24+  80B8 21 D1 58             LD HL, $5800 + 6 * 32 + 17    ; Row 6, column 17
 25+  80BB 36 9F                LD (HL), $9F
 26+  80BD
 27+  80BD AF                   XOR A
 28+  80BE CD F7 80             CALL READYKEY
 29+  80C1 FE 01                CP 1
 30+  80C3 CA 0A 80             JP Z, STARTINGSCREEN    ; Y - Start screen
 31+  80C6 3E 3B                LD A, $3B               ; N - End of code.
 32+  80C8 06 08                LD B, 8
 33+  80CA 0E 0B                LD C, 11
 34+  80CC DD 21 F2 80          LD IX, ENDMESSAGE       ; End!
 35+  80D0 CD 1B 81             CALL PRINTAT
 36+  80D3 21 D1 58             LD HL, $5800 + 6 * 32 + 17    ; Row 10, column 23
 37+  80D6 36 38                LD (HL), $38
 38+  80D8
 39+  80D8 C3 44 80             JP ENDOFCODE
 40+  80DB              ;-----------------------------------------------------------------------------------------
 41+  80DB
 42+  80DB 42 59 45 21  BYEMESSAGE: DB "BYE!", 0
 42+  80DF 00
 43+  80E0 50 4C 41 59  PLAYAGAINMESSAGE: DB "PLAY AGAIN? (Y/N)", 0
 43+  80E4 20 41 47 41
 43+  80E8 49 4E 3F 20
 43+  80EC 28 59 2F 4E
 43+  80F0 29 00
 44+  80F2 45 4E 44 21  ENDMESSAGE: DB "END!", 0
 44+  80F6 00
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\EndScreen.asm
 57   80F7                      INCLUDE "ReadKey.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\ReadKey.asm
  1+  80F7              ;-----------------------------------------------------------------------------------------
  2+  80F7              ; READYKEY - Identifies whether the user presses the Y key.
  3+  80F7              ;	OUT - A = 1 if Y key is pressed.
  4+  80F7              ;-----------------------------------------------------------------------------------------
  5+  80F7              READYKEY:
  6+  80F7 01 FE DF             LD BC, $DFFE       ; Keys: Y, U, I, O, P
  7+  80FA ED 78                IN A, (C)
  8+  80FC CB 67                BIT 4, A        ; Key Y
  9+  80FE 20 09                JR NZ, READNKEY
 10+  8100              LOOPY:
 11+  8100 ED 78                IN A, (C)
 12+  8102 FE FF                CP $FF
 13+  8104 20 FA                JR NZ, LOOPY
 14+  8106 3E 01                LD A, 1
 15+  8108 C9                   RET
 16+  8109              ;-----------------------------------------------------------------------------------------
 17+  8109
 18+  8109
 19+  8109              ;-----------------------------------------------------------------------------------------
 20+  8109              ; READNKEY - Identifies whether the user presses the N key.
 21+  8109              ;	OUT - A = 2 if N key is pressed.
 22+  8109              ;-----------------------------------------------------------------------------------------
 23+  8109              READNKEY:
 24+  8109 3E 7F                LD A, $7F       ; Keys: B, N, M, SYMB, SPACE
 25+  810B DB FE                IN A, ($FE)
 26+  810D CB 5F                BIT 3, A        ; Key N
 27+  810F 20 E6                JR NZ, READYKEY
 28+  8111              LOOPN:
 29+  8111 ED 78                IN A, (C)
 30+  8113 FE FF                CP $FF
 31+  8115 20 FA                JR NZ, LOOPN
 32+  8117 3E 02                LD A, 2
 33+  8119 C9                   RET
 34+  811A C9                   RET
 35+  811B              ;-----------------------------------------------------------------------------------------
 36+  811B
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\ReadKey.asm
 58   811B                      INCLUDE "Printat.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\Printat.asm
  1+  811B              ; -------------------------------
  2+  811B              ; ZX Spectrum Text print library
  3+  811B              ; Daniel León - AOC - UFV 2020
  4+  811B              ; -------------------------------
  5+  811B
  6+  811B
  7+  811B              ; ----------------------------------------------------------------------------------------
  8+  811B              ; PRINTAT - Print a string in a position and attributes as per registers:
  9+  811B              ;		IN	A	: Bit 7=1 For Flash / Bit 6=1 For Brigh / Bit 5,4,3 for Paper / Bit 2,1,0 for Ink
 10+  811B              ;		IN	B	: Row 0..23
 11+  811B              ;		IN	C	: Column 0..31
 12+  811B              ;		IN	IX	: Address of text (Text must end in a 0)
 13+  811B              ; ----------------------------------------------------------------------------------------
 14+  811B CD 2A 81     PRINTAT:	CALL PREP_PRT				; Update Attribute var &Screen & Attributes pointers
 15+  811E              ; ----------------------------------------------------------------------------------------
 16+  811E              ;		VVV Do not move PRINTSTR below as PRINTAT continues into PRINTSTR routine
 17+  811E              ; ----------------------------------------------------------------------------------------
 18+  811E              ; PRINTSTR - Prints String - IX Points to the String start
 19+  811E              ; ----------------------------------------------------------------------------------------
 20+  811E DD 7E 00     PRINTSTR:   LD A,(IX)					; A Contains first char to print
 21+  8121 B7           			OR A						; check for end of string (0)
 22+  8122 C8           			RET Z						; Finish printing if 0
 23+  8123 CD 58 81     			CALL PRINTCHNUM
 24+  8126 DD 23        			INC IX						; Move to next char in string
 25+  8128 18 F4        			JR PRINTSTR					; Start over printing sequence
 26+  812A              ; ----------------------------------------------------------------------------------------
 27+  812A
 28+  812A
 29+  812A              ;-----------------------------------------------------------------------------------------
 30+  812A              ; PREP_PRT - Updates Print_Attr, SCR & ATTR Vars
 31+  812A              ;-----------------------------------------------------------------------------------------
 32+  812A 32 9E 81     PREP_PRT:	LD (PRINT_ATTR),A			; Set Attribute
 33+  812D CD 33 81     PREP_PRT_2:	CALL CRtoSCREEN
 34+  8130 C3 45 81     			JP CRtoATTR
 35+  8133              ;-----------------------------------------------------------------------------------------
 36+  8133
 37+  8133              ;-----------------------------------------------------------------------------------------
 38+  8133              ; CRtoSCREEN - Converts a scr char coord into a SCREEN Address   b,c = y,x positions
 39+  8133              ;	IN  - B=Row, C=Column
 40+  8133              ;	OUT - HL=Address in screen also stored in (SCR_CUR_PTR)
 41+  8133              ;	Conversion:
 42+  8133              ;			Row FFfff   Column CCCCC
 43+  8133              ;			HL=%010FF000 fffCCCCC
 44+  8133              ;-----------------------------------------------------------------------------------------
 45+  8133              CRtoSCREEN:
 46+  8133 78           			LD A,B						; %___FFfff
 47+  8134 F6 40        			OR #40						; %010FFfff
 48+  8136 E6 F8        			AND #F8						; %010FF000
 49+  8138 67           			LD H,A
 50+  8139
 51+  8139 78           			LD A,B						; %___FFfff
 52+  813A E6 07        			AND #7						; %00000fff
 53+  813C 0F           			RRCA						; %f00000ff
 54+  813D 0F           			RRCA						; %ff00000f
 55+  813E 0F           			RRCA						; %fff00000
 56+  813F B1           			OR C						; %fffCCCCC
 57+  8140 6F           			LD L,A
 58+  8141 22 9A 81                 LD (SCR_CUR_PTR),HL			; Update Variable
 59+  8144 C9                       RET
 60+  8145              ; ----------------------------------------------------------------------------------------
 61+  8145
 62+  8145
 63+  8145
 64+  8145              ;-----------------------------------------------------------------------------------------
 65+  8145              ; CRtoATTR - Converts a screen char coord  into a ATTR Address  b,c = y,x positions
 66+  8145              ;	IN  - B=Row, C=Column
 67+  8145              ;	OUT - HL=Address in screen also stored in (SCR_ATTR_PTR)
 68+  8145              ;	Conversion:
 69+  8145              ;			Row FFfff   Column CCCCC
 70+  8145              ;			HL=%010110FF fffCCCCC
 71+  8145              ;-----------------------------------------------------------------------------------------
 72+  8145              CRtoATTR:
 73+  8145 78           			LD A,B						; %___FFfff
 74+  8146 0F           			RRCA						; %f000FFff
 75+  8147 0F           			RRCA						; %ff000FFf
 76+  8148 0F           			RRCA						; %fff000FF
 77+  8149 6F           			LD L,A
 78+  814A E6 03        			AND 3						; %000000FF	value of FF can be only 00,01,10
 79+  814C F6 58        			OR #58						; %010110FF value will be #58, #59 or #5A
 80+  814E 67           			LD H,A
 81+  814F
 82+  814F 7D           			LD A,L						; %fff000FF
 83+  8150 E6 E0        			AND #E0						; %fff00000
 84+  8152 B1           			OR C						; %fffCCCCC
 85+  8153 6F           			LD L,A
 86+  8154
 87+  8154 22 9C 81                 LD (SCR_ATTR_PTR),HL		; Update Variable
 88+  8157 C9                       RET
 89+  8158              ; ----------------------------------------------------------------------------------------
 90+  8158
 91+  8158
 92+  8158
 93+  8158              ; ----------------------------------------------------------------------------------------
 94+  8158              ; PRINTCHNUM - Prints Char Number N (stored in A)
 95+  8158              ;-----------------------------------------------------------------------------------------
 96+  8158              PRINTCHNUM:	;SUB 32						; Adjust Ascii to charset
 97+  8158 26 00        			LD H,0						; Multiply value by 8 to get to right Char in Charset
 98+  815A 6F           			LD L,A
 99+  815B 29           			ADD HL,HL
100+  815C 29           			ADD HL,HL
101+  815D 29           			ADD HL,HL
102+  815E 11 9F 80     			LD DE, CHARSET-(8*32)		; Optimize in compile time (instead of sub 32)
103+  8161 19           			ADD HL,DE
104+  8162 EB           			EX  DE,HL					;Value in DE
105+  8163              			; Continues to printchar below
106+  8163              ; ----------------------------------------------------------------------------------------
107+  8163
108+  8163
109+  8163              ; ----------------------------------------------------------------------------------------
110+  8163              ; PRINTCHAR - Prints Char  (DE points to the char. Uses HL as last Cur Pointer)
111+  8163              ; ----------------------------------------------------------------------------------------
112+  8163              PRINTCHAR:
113+  8163 06 08        			LD B,8						; 8 Lines per char
114+  8165 2A 9A 81                 LD HL, (SCR_CUR_PTR)		; Load Cursor Pointer y,x
115+  8168
116+  8168 1A           BYTEPCHAR:	LD A,(DE)					; Get Char to be printed, first line
117+  8169 77           			LD (HL),A					; Move to Printing location
118+  816A 24                       INC H						; inc H so next line in char (ZX Spectrum Screen RAM)
119+  816B 13                       INC DE 						; next line to be printed
120+  816C 10 FA                    DJNZ BYTEPCHAR				; Repeat 8 lines
121+  816E 3A 9E 81                 LD A,(PRINT_ATTR) 			; Load Attributes to print char with
122+  8171 2A 9C 81                 LD HL, (SCR_ATTR_PTR)
123+  8174 77                       LD (HL),A
124+  8175 21 9C 81                 LD HL, SCR_ATTR_PTR			; Get pointer to ATTR
125+  8178 34                       INC (HL)					; Move Attribute cursor to next char
126+  8179 21 9A 81     			LD HL, SCR_CUR_PTR
127+  817C 34           			INC (HL)					; update Cursor pointer to next position
128+  817D C9                       RET
129+  817E              ; ----------------------------------------------------------------------------------------
130+  817E
131+  817E
132+  817E
133+  817E              ; ----------------------------------------------------------------------------------------
134+  817E              ; INK2PAPER - moves ink of attribute stored in (PRINT_ATTR) to paper and sets ink to 0
135+  817E              ; 				Sets bright 1 and flash 0
136+  817E              ; ----------------------------------------------------------------------------------------
137+  817E 3A 9E 81     INK2PAPER:	LD A, (PRINT_ATTR)		    ; Get storedAttribute
138+  8181 E6 07                    AND 7						; get Attr INK in A
139+  8183 07           			RLCA
140+  8184 07           			RLCA
141+  8185 07           			RLCA						; move Ink to Paper
142+  8186 F6 40        			OR 64						; ink 0 bright 1
143+  8188 32 9E 81     			LD (PRINT_ATTR),A		    ; Get storedAttribute
144+  818B C9           			RET
145+  818C              ; ----------------------------------------------------------------------------------------
146+  818C
147+  818C
148+  818C
149+  818C
150+  818C 21 00 40     CLEARSCR:	LD HL,$4000					; Erases screen by writing 0 to all pixels and attributes
151+  818F 11 01 40     			LD DE,$4001
152+  8192 01 FF 1A     			LD BC,6911
153+  8195 36 00        			LD (HL),0
154+  8197 ED B0        			LDIR
155+  8199 C9           			RET
156+  819A
157+  819A
158+  819A              SCR_CUR_PTR
158+  819A 00 00          	db $00, $00				; Cursor Pointer in Screen (2 bytes) (HL)
159+  819C 00 00        SCR_ATTR_PTR: 	db $00, $00				; Attr Pointer in Screen (2 bytes) (HL)
160+  819E 00           PRINT_ATTR:		db $00					; Attribute used by printchar routine (1 byte)
161+  819F
162+  819F              CHARSET: incbin "charset.bin"			; Charset used
163+  849F
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\Printat.asm
 59   849F                      INCLUDE "LoadStartingScreen.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\LoadStartingScreen.asm
  1+  849F              ;-----------------------------------------------------------------------------------------
  2+  849F              ; LOADSTARTINGSCREEN_LOOP - Set values to paint the graphic.
  3+  849F              ;-----------------------------------------------------------------------------------------
  4+  849F              LOADSTARTINGSCREEN:
  5+  849F 21 B4 84         LD HL, LOADSTARTINGSCREEN_START ; HL = Starting addres of screen data
  6+  84A2
  7+  84A2                  ; Save used registers
  8+  84A2 C5               PUSH BC
  9+  84A3 D5               PUSH DE
 10+  84A4
 11+  84A4 11 00 40         LD DE, $4000 ; Display to video memory area
 12+  84A7 01 00 1B         LD BC, 6912  ; VidkeoRAM size
 13+  84AA              ;-----------------------------------------------------------------------------------------
 14+  84AA
 15+  84AA              ;-----------------------------------------------------------------------------------------
 16+  84AA              ; LOADSTARTINGSCREEN_LOOP - Displays the start screen graphic.
 17+  84AA              ;-----------------------------------------------------------------------------------------
 18+  84AA              LOADSTARTINGSCREEN_LOOP:
 19+  84AA ED A0            LDI ; (DE) = (HL) , DE++, HL++, BC--
 20+  84AC
 21+  84AC 78               LD A, B ; Check if BC is 0
 22+  84AD B1               OR C ; BC = 0 <=> B|C=0
 23+  84AE C2 AA 84         JP NZ, LOADSTARTINGSCREEN_LOOP ; Next display byte
 24+  84B1
 25+  84B1                  ; Retrieve used registers
 26+  84B1 D1               POP DE
 27+  84B2 C1               POP BC
 28+  84B3
 29+  84B3 C9               RET
 30+  84B4              ;-----------------------------------------------------------------------------------------
 31+  84B4
 32+  84B4              LOADSTARTINGSCREEN_START: INCBIN "StartingScreenTetris.scr"
 33+  9FB4
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\LoadStartingScreen.asm
 60   9FB4                      INCLUDE "LoadEndingScreen.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\LoadEndingScreen.asm
  1+  9FB4              ;-----------------------------------------------------------------------------------------
  2+  9FB4              ; LOADENDINGSCREEN -  Set values to paint the graphic.
  3+  9FB4              ;-----------------------------------------------------------------------------------------
  4+  9FB4              LOADENDINGSCREEN:
  5+  9FB4 21 C9 9F         LD HL, LOADSTARTINGSCREEN_END ; HL = Starting addres of screen data
  6+  9FB7
  7+  9FB7                  ; Save used registers
  8+  9FB7 C5               PUSH BC
  9+  9FB8 D5               PUSH DE
 10+  9FB9
 11+  9FB9 11 00 40         LD DE, $4000 ; Display to video memory area
 12+  9FBC 01 00 1B         LD BC, 6912  ; VidkeoRAM size
 13+  9FBF              ;-----------------------------------------------------------------------------------------
 14+  9FBF
 15+  9FBF              ;-----------------------------------------------------------------------------------------
 16+  9FBF              ; LOADENDINGSCREEN_LOOP - Displays the end screen graphic.
 17+  9FBF              ;-----------------------------------------------------------------------------------------
 18+  9FBF              LOADENDINGSCREEN_LOOP:
 19+  9FBF ED A0            LDI ; (DE) = (HL) , DE++, HL++, BC--
 20+  9FC1
 21+  9FC1 78               LD A, B ; Check if BC is 0
 22+  9FC2 B1               OR C ; BC = 0 <=> B|C=0
 23+  9FC3 C2 BF 9F         JP NZ, LOADENDINGSCREEN_LOOP ; Next display byte
 24+  9FC6
 25+  9FC6                  ; Retrieve used registers
 26+  9FC6 D1               POP DE
 27+  9FC7 C1               POP BC
 28+  9FC8
 29+  9FC8 C9               RET
 30+  9FC9              ;-----------------------------------------------------------------------------------------
 31+  9FC9
 32+  9FC9              LOADSTARTINGSCREEN_END: INCBIN "EndingScreenTetris.scr"
 33+  BAC9
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\LoadEndingScreen.asm
 61   BAC9                      INCLUDE "Tetris_3D.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\Tetris_3D.asm
  1+  BAC9 FF 81 81 85  Tetro_3D:   DB $FF, $81, $81, $85, $85, $9D, $81, $FF ; Patrón para los bloques
  1+  BACD 85 9D 81 FF
  2+  BAD1
  3+  BAD1              TETRIS_3D:
  4+  BAD1 16 03            LD D,3              ; Los 3 bloques de píxeles
  5+  BAD3 DD 21 00 40      LD IX,$4000         ; Dirección de comienzo de la VRAM
  6+  BAD7
  7+  BAD7              T3D3:
  8+  BAD7
  9+  BAD7 FD 21 C9 BA      LD IY,Tetro_3D      ; Primer byte del patrón
 10+  BADB
 11+  BADB 0E 08            LD C,8              ; 8 bytes del patrón
 12+  BADD              T3D2:
 13+  BADD 06 00            LD B,0              ; 256 bytes de cada línea del patrón
 14+  BADF FD 7E 00         LD a,(IY)           ; Cargo el valor del patrón
 15+  BAE2              T3D1:
 16+  BAE2 DD 77 00         LD (IX),a           ; Cargo el patrón en la VideoRam
 17+  BAE5 DD 23            INC IX              ; Siguientes 8 pixels
 18+  BAE7 10 F9            DJNZ T3D1           ; Fin del bucle
 19+  BAE9
 20+  BAE9 0D               DEC C               ; Fin del 2º Bucle
 21+  BAEA FD 23            inc IY              ; Siguiente byte del patrón
 22+  BAEC 20 EF            JR NZ,T3D2
 23+  BAEE
 24+  BAEE 15               DEC D               ; Fin del 3º bucle
 25+  BAEF 20 E6            JR NZ, T3D3
 26+  BAF1
 27+  BAF1 C9               RET
 28+  BAF2
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\Tetris_3D.asm
 62   BAF2                      INCLUDE "AtributeCoordinate.asm"
# file opened: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\AtributeCoordinate.asm
  1+  BAF2              ; B -> Y
  2+  BAF2              ; C -> X
  3+  BAF2              ; A -> Color
  4+  BAF2              DOTYXC:
  5+  BAF2 F5               PUSH AF
  6+  BAF3 68               LD L, B
  7+  BAF4 26 00            LD H, 0 ; HL = B
  8+  BAF6
  9+  BAF6 29               ADD HL, HL
 10+  BAF7 29               ADD HL, HL
 11+  BAF8 29               ADD HL, HL
 12+  BAF9 29               ADD HL, HL
 13+  BAFA 29               ADD HL, HL; HL = HL *32
 14+  BAFB 59               LD E,C
 15+  BAFC 16 00            LD D, 0 ; DE = C
 16+  BAFE 19               ADD HL, DE
 17+  BAFF 11 00 58         LD DE, $5800
 18+  BB02 19               ADD HL, DE ; HL = Y*32 + X + $5800
 19+  BB03
 20+  BB03 77               LD (HL), A
 21+  BB04 F1               POP AF
 22+  BB05 C9               RET
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\AtributeCoordinate.asm
# file closed: C:\Users\rmore\Documentos\Universidad\2ndo\AOC\TetrisASM\src\StartScreen.asm
